
keypadlcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001a8  00802000  000015a4  00001638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000020b  008021a8  008021a8  000017e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003e5b  00000000  00000000  000019f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000df0  00000000  00000000  0000584b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000208a  00000000  00000000  0000663b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000624  00000000  00000000  000086c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c44  00000000  00000000  00008cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000032bd  00000000  00000000  00009930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e0  00000000  00000000  0000cbed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	64 c2       	rjmp	.+1224   	; 0x4ce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c2       	rjmp	.+1220   	; 0x4ce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c2       	rjmp	.+1216   	; 0x4ce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c2       	rjmp	.+1212   	; 0x4ce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c2       	rjmp	.+1208   	; 0x4ce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c2       	rjmp	.+1204   	; 0x4ce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c2       	rjmp	.+1200   	; 0x4ce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c2       	rjmp	.+1196   	; 0x4ce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c2       	rjmp	.+1192   	; 0x4ce <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c2       	rjmp	.+1188   	; 0x4ce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c2       	rjmp	.+1184   	; 0x4ce <__bad_interrupt>
      2e:	00 00       	nop
      30:	4e c2       	rjmp	.+1180   	; 0x4ce <__bad_interrupt>
      32:	00 00       	nop
      34:	4c c2       	rjmp	.+1176   	; 0x4ce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c2       	rjmp	.+1172   	; 0x4ce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c2       	rjmp	.+1168   	; 0x4ce <__bad_interrupt>
      3e:	00 00       	nop
      40:	46 c2       	rjmp	.+1164   	; 0x4ce <__bad_interrupt>
      42:	00 00       	nop
      44:	44 c2       	rjmp	.+1160   	; 0x4ce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c2       	rjmp	.+1156   	; 0x4ce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c2       	rjmp	.+1152   	; 0x4ce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c2       	rjmp	.+1148   	; 0x4ce <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c2       	rjmp	.+1144   	; 0x4ce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c2       	rjmp	.+1140   	; 0x4ce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c2       	rjmp	.+1136   	; 0x4ce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c2       	rjmp	.+1132   	; 0x4ce <__bad_interrupt>
      62:	00 00       	nop
      64:	34 c2       	rjmp	.+1128   	; 0x4ce <__bad_interrupt>
      66:	00 00       	nop
      68:	32 c2       	rjmp	.+1124   	; 0x4ce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c2       	rjmp	.+1120   	; 0x4ce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c2       	rjmp	.+1116   	; 0x4ce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c2       	rjmp	.+1112   	; 0x4ce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c2       	rjmp	.+1108   	; 0x4ce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c2       	rjmp	.+1104   	; 0x4ce <__bad_interrupt>
      7e:	00 00       	nop
      80:	26 c2       	rjmp	.+1100   	; 0x4ce <__bad_interrupt>
      82:	00 00       	nop
      84:	24 c2       	rjmp	.+1096   	; 0x4ce <__bad_interrupt>
      86:	00 00       	nop
      88:	22 c2       	rjmp	.+1092   	; 0x4ce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	20 c2       	rjmp	.+1088   	; 0x4ce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c2       	rjmp	.+1084   	; 0x4ce <__bad_interrupt>
      92:	00 00       	nop
      94:	1c c2       	rjmp	.+1080   	; 0x4ce <__bad_interrupt>
      96:	00 00       	nop
      98:	1a c2       	rjmp	.+1076   	; 0x4ce <__bad_interrupt>
      9a:	00 00       	nop
      9c:	18 c2       	rjmp	.+1072   	; 0x4ce <__bad_interrupt>
      9e:	00 00       	nop
      a0:	16 c2       	rjmp	.+1068   	; 0x4ce <__bad_interrupt>
      a2:	00 00       	nop
      a4:	14 c2       	rjmp	.+1064   	; 0x4ce <__bad_interrupt>
      a6:	00 00       	nop
      a8:	12 c2       	rjmp	.+1060   	; 0x4ce <__bad_interrupt>
      aa:	00 00       	nop
      ac:	10 c2       	rjmp	.+1056   	; 0x4ce <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0e c2       	rjmp	.+1052   	; 0x4ce <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0c c2       	rjmp	.+1048   	; 0x4ce <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0a c2       	rjmp	.+1044   	; 0x4ce <__bad_interrupt>
      ba:	00 00       	nop
      bc:	08 c2       	rjmp	.+1040   	; 0x4ce <__bad_interrupt>
      be:	00 00       	nop
      c0:	06 c2       	rjmp	.+1036   	; 0x4ce <__bad_interrupt>
      c2:	00 00       	nop
      c4:	04 c2       	rjmp	.+1032   	; 0x4ce <__bad_interrupt>
      c6:	00 00       	nop
      c8:	02 c2       	rjmp	.+1028   	; 0x4ce <__bad_interrupt>
      ca:	00 00       	nop
      cc:	00 c2       	rjmp	.+1024   	; 0x4ce <__bad_interrupt>
      ce:	00 00       	nop
      d0:	fe c1       	rjmp	.+1020   	; 0x4ce <__bad_interrupt>
      d2:	00 00       	nop
      d4:	fc c1       	rjmp	.+1016   	; 0x4ce <__bad_interrupt>
      d6:	00 00       	nop
      d8:	fa c1       	rjmp	.+1012   	; 0x4ce <__bad_interrupt>
      da:	00 00       	nop
      dc:	f8 c1       	rjmp	.+1008   	; 0x4ce <__bad_interrupt>
      de:	00 00       	nop
      e0:	f6 c1       	rjmp	.+1004   	; 0x4ce <__bad_interrupt>
      e2:	00 00       	nop
      e4:	f4 c1       	rjmp	.+1000   	; 0x4ce <__bad_interrupt>
      e6:	00 00       	nop
      e8:	f2 c1       	rjmp	.+996    	; 0x4ce <__bad_interrupt>
      ea:	00 00       	nop
      ec:	f0 c1       	rjmp	.+992    	; 0x4ce <__bad_interrupt>
      ee:	00 00       	nop
      f0:	ee c1       	rjmp	.+988    	; 0x4ce <__bad_interrupt>
      f2:	00 00       	nop
      f4:	ec c1       	rjmp	.+984    	; 0x4ce <__bad_interrupt>
      f6:	00 00       	nop
      f8:	ea c1       	rjmp	.+980    	; 0x4ce <__bad_interrupt>
      fa:	00 00       	nop
      fc:	e8 c1       	rjmp	.+976    	; 0x4ce <__bad_interrupt>
      fe:	00 00       	nop
     100:	e6 c1       	rjmp	.+972    	; 0x4ce <__bad_interrupt>
     102:	00 00       	nop
     104:	e4 c1       	rjmp	.+968    	; 0x4ce <__bad_interrupt>
     106:	00 00       	nop
     108:	e2 c1       	rjmp	.+964    	; 0x4ce <__bad_interrupt>
     10a:	00 00       	nop
     10c:	e0 c1       	rjmp	.+960    	; 0x4ce <__bad_interrupt>
     10e:	00 00       	nop
     110:	de c1       	rjmp	.+956    	; 0x4ce <__bad_interrupt>
     112:	00 00       	nop
     114:	dc c1       	rjmp	.+952    	; 0x4ce <__bad_interrupt>
     116:	00 00       	nop
     118:	da c1       	rjmp	.+948    	; 0x4ce <__bad_interrupt>
     11a:	00 00       	nop
     11c:	d8 c1       	rjmp	.+944    	; 0x4ce <__bad_interrupt>
     11e:	00 00       	nop
     120:	d6 c1       	rjmp	.+940    	; 0x4ce <__bad_interrupt>
     122:	00 00       	nop
     124:	d4 c1       	rjmp	.+936    	; 0x4ce <__bad_interrupt>
     126:	00 00       	nop
     128:	d2 c1       	rjmp	.+932    	; 0x4ce <__bad_interrupt>
     12a:	00 00       	nop
     12c:	d0 c1       	rjmp	.+928    	; 0x4ce <__bad_interrupt>
     12e:	00 00       	nop
     130:	ce c1       	rjmp	.+924    	; 0x4ce <__bad_interrupt>
     132:	00 00       	nop
     134:	cc c1       	rjmp	.+920    	; 0x4ce <__bad_interrupt>
     136:	00 00       	nop
     138:	ca c1       	rjmp	.+916    	; 0x4ce <__bad_interrupt>
     13a:	00 00       	nop
     13c:	c8 c1       	rjmp	.+912    	; 0x4ce <__bad_interrupt>
     13e:	00 00       	nop
     140:	c6 c1       	rjmp	.+908    	; 0x4ce <__bad_interrupt>
     142:	00 00       	nop
     144:	c4 c1       	rjmp	.+904    	; 0x4ce <__bad_interrupt>
     146:	00 00       	nop
     148:	c2 c1       	rjmp	.+900    	; 0x4ce <__bad_interrupt>
     14a:	00 00       	nop
     14c:	c0 c1       	rjmp	.+896    	; 0x4ce <__bad_interrupt>
     14e:	00 00       	nop
     150:	be c1       	rjmp	.+892    	; 0x4ce <__bad_interrupt>
     152:	00 00       	nop
     154:	bc c1       	rjmp	.+888    	; 0x4ce <__bad_interrupt>
     156:	00 00       	nop
     158:	ba c1       	rjmp	.+884    	; 0x4ce <__bad_interrupt>
     15a:	00 00       	nop
     15c:	b8 c1       	rjmp	.+880    	; 0x4ce <__bad_interrupt>
     15e:	00 00       	nop
     160:	b6 c1       	rjmp	.+876    	; 0x4ce <__bad_interrupt>
     162:	00 00       	nop
     164:	b4 c1       	rjmp	.+872    	; 0x4ce <__bad_interrupt>
     166:	00 00       	nop
     168:	b2 c1       	rjmp	.+868    	; 0x4ce <__bad_interrupt>
     16a:	00 00       	nop
     16c:	b0 c1       	rjmp	.+864    	; 0x4ce <__bad_interrupt>
     16e:	00 00       	nop
     170:	ae c1       	rjmp	.+860    	; 0x4ce <__bad_interrupt>
     172:	00 00       	nop
     174:	ac c1       	rjmp	.+856    	; 0x4ce <__bad_interrupt>
     176:	00 00       	nop
     178:	aa c1       	rjmp	.+852    	; 0x4ce <__bad_interrupt>
     17a:	00 00       	nop
     17c:	a8 c1       	rjmp	.+848    	; 0x4ce <__bad_interrupt>
     17e:	00 00       	nop
     180:	a6 c1       	rjmp	.+844    	; 0x4ce <__bad_interrupt>
     182:	00 00       	nop
     184:	a4 c1       	rjmp	.+840    	; 0x4ce <__bad_interrupt>
     186:	00 00       	nop
     188:	a2 c1       	rjmp	.+836    	; 0x4ce <__bad_interrupt>
     18a:	00 00       	nop
     18c:	a0 c1       	rjmp	.+832    	; 0x4ce <__bad_interrupt>
     18e:	00 00       	nop
     190:	9e c1       	rjmp	.+828    	; 0x4ce <__bad_interrupt>
     192:	00 00       	nop
     194:	9c c1       	rjmp	.+824    	; 0x4ce <__bad_interrupt>
     196:	00 00       	nop
     198:	9a c1       	rjmp	.+820    	; 0x4ce <__bad_interrupt>
     19a:	00 00       	nop
     19c:	98 c1       	rjmp	.+816    	; 0x4ce <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	96 c1       	rjmp	.+812    	; 0x4ce <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	94 c1       	rjmp	.+808    	; 0x4ce <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	92 c1       	rjmp	.+804    	; 0x4ce <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	90 c1       	rjmp	.+800    	; 0x4ce <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	8e c1       	rjmp	.+796    	; 0x4ce <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	8c c1       	rjmp	.+792    	; 0x4ce <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	8a c1       	rjmp	.+788    	; 0x4ce <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	88 c1       	rjmp	.+784    	; 0x4ce <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	86 c1       	rjmp	.+780    	; 0x4ce <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	84 c1       	rjmp	.+776    	; 0x4ce <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	82 c1       	rjmp	.+772    	; 0x4ce <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	80 c1       	rjmp	.+768    	; 0x4ce <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	7e c1       	rjmp	.+764    	; 0x4ce <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	7c c1       	rjmp	.+760    	; 0x4ce <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	7a c1       	rjmp	.+756    	; 0x4ce <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	78 c1       	rjmp	.+752    	; 0x4ce <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	76 c1       	rjmp	.+748    	; 0x4ce <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	74 c1       	rjmp	.+744    	; 0x4ce <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	72 c1       	rjmp	.+740    	; 0x4ce <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	70 c1       	rjmp	.+736    	; 0x4ce <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	6e c1       	rjmp	.+732    	; 0x4ce <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	6c c1       	rjmp	.+728    	; 0x4ce <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	6a c1       	rjmp	.+724    	; 0x4ce <__bad_interrupt>
	...

000001fc <__trampolines_end>:
     1fc:	00 00       	nop
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 20       	and	r0, r0
     204:	20 20       	and	r2, r0
     206:	20 20       	and	r2, r0
     208:	00 20       	and	r0, r0
     20a:	50 50       	subi	r21, 0x00	; 0
     20c:	50 00       	.word	0x0050	; ????
     20e:	00 00       	nop
     210:	00 50       	subi	r16, 0x00	; 0
     212:	50 f8       	bld	r5, 0
     214:	50 f8       	bld	r5, 0
     216:	50 50       	subi	r21, 0x00	; 0
     218:	20 78       	andi	r18, 0x80	; 128
     21a:	a0 70       	andi	r26, 0x00	; 0
     21c:	28 f0       	brcs	.+10     	; 0x228 <__trampolines_end+0x2c>
     21e:	20 c0       	rjmp	.+64     	; 0x260 <__trampolines_end+0x64>
     220:	c8 10       	cpse	r12, r8
     222:	20 40       	sbci	r18, 0x00	; 0
     224:	98 18       	sub	r9, r8
     226:	60 90 a0 40 	lds	r6, 0x40A0
     22a:	a8 90       	.word	0x90a8	; ????
     22c:	68 60       	ori	r22, 0x08	; 8
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	00 00       	nop
     232:	00 00       	nop
     234:	10 20       	and	r1, r0
     236:	40 40       	sbci	r20, 0x00	; 0
     238:	40 20       	and	r4, r0
     23a:	10 40       	sbci	r17, 0x00	; 0
     23c:	20 10       	cpse	r2, r0
     23e:	10 10       	cpse	r1, r0
     240:	20 40       	sbci	r18, 0x00	; 0
     242:	00 50       	subi	r16, 0x00	; 0
     244:	20 f8       	bld	r2, 0
     246:	20 50       	subi	r18, 0x00	; 0
     248:	00 00       	nop
     24a:	20 20       	and	r2, r0
     24c:	f8 20       	and	r15, r8
     24e:	20 00       	.word	0x0020	; ????
     250:	00 00       	nop
     252:	00 00       	nop
     254:	60 20       	and	r6, r0
     256:	40 00       	.word	0x0040	; ????
     258:	00 00       	nop
     25a:	f8 00       	.word	0x00f8	; ????
     25c:	00 00       	nop
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 60       	ori	r16, 0x00	; 0
     264:	60 00       	.word	0x0060	; ????
     266:	08 10       	cpse	r0, r8
     268:	20 40       	sbci	r18, 0x00	; 0
     26a:	80 00       	.word	0x0080	; ????
     26c:	70 88       	ldd	r7, Z+16	; 0x10
     26e:	98 a8       	ldd	r9, Y+48	; 0x30
     270:	c8 88       	ldd	r12, Y+16	; 0x10
     272:	70 20       	and	r7, r0
     274:	60 20       	and	r6, r0
     276:	20 20       	and	r2, r0
     278:	20 70       	andi	r18, 0x00	; 0
     27a:	70 88       	ldd	r7, Z+16	; 0x10
     27c:	08 10       	cpse	r0, r8
     27e:	20 40       	sbci	r18, 0x00	; 0
     280:	f8 f8       	.word	0xf8f8	; ????
     282:	10 20       	and	r1, r0
     284:	10 08       	sbc	r1, r0
     286:	88 70       	andi	r24, 0x08	; 8
     288:	10 30       	cpi	r17, 0x00	; 0
     28a:	50 90 f8 10 	lds	r5, 0x10F8
     28e:	10 f8       	bld	r1, 0
     290:	80 f0       	brcs	.+32     	; 0x2b2 <__trampolines_end+0xb6>
     292:	08 08       	sbc	r0, r8
     294:	88 70       	andi	r24, 0x08	; 8
     296:	30 40       	sbci	r19, 0x00	; 0
     298:	80 f0       	brcs	.+32     	; 0x2ba <__trampolines_end+0xbe>
     29a:	88 88       	ldd	r8, Y+16	; 0x10
     29c:	70 f8       	bld	r7, 0
     29e:	08 10       	cpse	r0, r8
     2a0:	20 40       	sbci	r18, 0x00	; 0
     2a2:	40 40       	sbci	r20, 0x00	; 0
     2a4:	70 88       	ldd	r7, Z+16	; 0x10
     2a6:	88 70       	andi	r24, 0x08	; 8
     2a8:	88 88       	ldd	r8, Y+16	; 0x10
     2aa:	70 70       	andi	r23, 0x00	; 0
     2ac:	88 88       	ldd	r8, Y+16	; 0x10
     2ae:	78 08       	sbc	r7, r8
     2b0:	10 60       	ori	r17, 0x00	; 0
     2b2:	00 60       	ori	r16, 0x00	; 0
     2b4:	60 00       	.word	0x0060	; ????
     2b6:	60 60       	ori	r22, 0x00	; 0
     2b8:	00 00       	nop
     2ba:	60 60       	ori	r22, 0x00	; 0
     2bc:	00 60       	ori	r16, 0x00	; 0
     2be:	20 40       	sbci	r18, 0x00	; 0
     2c0:	08 10       	cpse	r0, r8
     2c2:	20 40       	sbci	r18, 0x00	; 0
     2c4:	20 10       	cpse	r2, r0
     2c6:	08 00       	.word	0x0008	; ????
     2c8:	00 f8       	bld	r0, 0
     2ca:	00 f8       	bld	r0, 0
     2cc:	00 00       	nop
     2ce:	80 40       	sbci	r24, 0x00	; 0
     2d0:	20 10       	cpse	r2, r0
     2d2:	20 40       	sbci	r18, 0x00	; 0
     2d4:	80 70       	andi	r24, 0x00	; 0
     2d6:	88 08       	sbc	r8, r8
     2d8:	10 20       	and	r1, r0
     2da:	00 20       	and	r0, r0
     2dc:	70 88       	ldd	r7, Z+16	; 0x10
     2de:	08 68       	ori	r16, 0x88	; 136
     2e0:	a8 a8       	ldd	r10, Y+48	; 0x30
     2e2:	70 70       	andi	r23, 0x00	; 0
     2e4:	88 88       	ldd	r8, Y+16	; 0x10
     2e6:	88 f8       	.word	0xf888	; ????
     2e8:	88 88       	ldd	r8, Y+16	; 0x10
     2ea:	f0 88       	ldd	r15, Z+16	; 0x10
     2ec:	88 f0       	brcs	.+34     	; 0x310 <__trampolines_end+0x114>
     2ee:	88 88       	ldd	r8, Y+16	; 0x10
     2f0:	f0 70       	andi	r31, 0x00	; 0
     2f2:	88 80       	ld	r8, Y
     2f4:	80 80       	ld	r8, Z
     2f6:	88 70       	andi	r24, 0x08	; 8
     2f8:	e0 90 88 88 	lds	r14, 0x8888
     2fc:	88 90       	.word	0x9088	; ????
     2fe:	e0 f8       	bld	r14, 0
     300:	80 80       	ld	r8, Z
     302:	f0 80       	ld	r15, Z
     304:	80 f8       	bld	r8, 0
     306:	f8 80       	ld	r15, Y
     308:	80 e0       	ldi	r24, 0x00	; 0
     30a:	80 80       	ld	r8, Z
     30c:	80 70       	andi	r24, 0x00	; 0
     30e:	88 80       	ld	r8, Y
     310:	80 98       	cbi	0x10, 0	; 16
     312:	88 70       	andi	r24, 0x08	; 8
     314:	88 88       	ldd	r8, Y+16	; 0x10
     316:	88 f8       	.word	0xf888	; ????
     318:	88 88       	ldd	r8, Y+16	; 0x10
     31a:	88 70       	andi	r24, 0x08	; 8
     31c:	20 20       	and	r2, r0
     31e:	20 20       	and	r2, r0
     320:	20 70       	andi	r18, 0x00	; 0
     322:	38 10       	cpse	r3, r8
     324:	10 10       	cpse	r1, r0
     326:	10 90 60 88 	lds	r1, 0x8860
     32a:	90 a0       	ldd	r9, Z+32	; 0x20
     32c:	c0 a0       	ldd	r12, Z+32	; 0x20
     32e:	90 88       	ldd	r9, Z+16	; 0x10
     330:	80 80       	ld	r8, Z
     332:	80 80       	ld	r8, Z
     334:	80 80       	ld	r8, Z
     336:	f8 88       	ldd	r15, Y+16	; 0x10
     338:	d8 a8       	ldd	r13, Y+48	; 0x30
     33a:	88 88       	ldd	r8, Y+16	; 0x10
     33c:	88 88       	ldd	r8, Y+16	; 0x10
     33e:	88 88       	ldd	r8, Y+16	; 0x10
     340:	c8 a8       	ldd	r12, Y+48	; 0x30
     342:	98 88       	ldd	r9, Y+16	; 0x10
     344:	88 70       	andi	r24, 0x08	; 8
     346:	88 88       	ldd	r8, Y+16	; 0x10
     348:	88 88       	ldd	r8, Y+16	; 0x10
     34a:	88 70       	andi	r24, 0x08	; 8
     34c:	f0 88       	ldd	r15, Z+16	; 0x10
     34e:	88 f0       	brcs	.+34     	; 0x372 <__trampolines_end+0x176>
     350:	80 80       	ld	r8, Z
     352:	80 70       	andi	r24, 0x00	; 0
     354:	88 88       	ldd	r8, Y+16	; 0x10
     356:	88 a8       	ldd	r8, Y+48	; 0x30
     358:	90 68       	ori	r25, 0x80	; 128
     35a:	f0 88       	ldd	r15, Z+16	; 0x10
     35c:	88 f0       	brcs	.+34     	; 0x380 <__trampolines_end+0x184>
     35e:	a0 90 88 78 	lds	r10, 0x7888
     362:	80 80       	ld	r8, Z
     364:	70 08       	sbc	r7, r0
     366:	08 f0       	brcs	.+2      	; 0x36a <__trampolines_end+0x16e>
     368:	f8 20       	and	r15, r8
     36a:	20 20       	and	r2, r0
     36c:	20 20       	and	r2, r0
     36e:	20 88       	ldd	r2, Z+16	; 0x10
     370:	88 88       	ldd	r8, Y+16	; 0x10
     372:	88 88       	ldd	r8, Y+16	; 0x10
     374:	88 70       	andi	r24, 0x08	; 8
     376:	88 88       	ldd	r8, Y+16	; 0x10
     378:	88 88       	ldd	r8, Y+16	; 0x10
     37a:	88 50       	subi	r24, 0x08	; 8
     37c:	20 88       	ldd	r2, Z+16	; 0x10
     37e:	88 88       	ldd	r8, Y+16	; 0x10
     380:	a8 a8       	ldd	r10, Y+48	; 0x30
     382:	d8 88       	ldd	r13, Y+16	; 0x10
     384:	88 88       	ldd	r8, Y+16	; 0x10
     386:	50 20       	and	r5, r0
     388:	50 88       	ldd	r5, Z+16	; 0x10
     38a:	88 88       	ldd	r8, Y+16	; 0x10
     38c:	88 50       	subi	r24, 0x08	; 8
     38e:	20 20       	and	r2, r0
     390:	20 20       	and	r2, r0
     392:	f8 08       	sbc	r15, r8
     394:	10 20       	and	r1, r0
     396:	40 80       	ld	r4, Z
     398:	f8 38       	cpi	r31, 0x88	; 136
     39a:	20 20       	and	r2, r0
     39c:	20 20       	and	r2, r0
     39e:	20 38       	cpi	r18, 0x80	; 128
     3a0:	00 80       	ld	r0, Z
     3a2:	40 20       	and	r4, r0
     3a4:	10 08       	sbc	r1, r0
     3a6:	00 e0       	ldi	r16, 0x00	; 0
     3a8:	20 20       	and	r2, r0
     3aa:	20 20       	and	r2, r0
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	20 50       	subi	r18, 0x00	; 0
     3b0:	88 00       	.word	0x0088	; ????
	...
     3ba:	00 f8       	bld	r0, 0
     3bc:	40 20       	and	r4, r0
     3be:	10 00       	.word	0x0010	; ????
     3c0:	00 00       	nop
     3c2:	00 00       	nop
     3c4:	00 70       	andi	r16, 0x00	; 0
     3c6:	08 78       	andi	r16, 0x88	; 136
     3c8:	88 78       	andi	r24, 0x88	; 136
     3ca:	80 80       	ld	r8, Z
     3cc:	b0 c8       	rjmp	.-3744   	; 0xfffff52e <__eeprom_end+0xff7ef52e>
     3ce:	88 88       	ldd	r8, Y+16	; 0x10
     3d0:	f0 00       	.word	0x00f0	; ????
     3d2:	00 70       	andi	r16, 0x00	; 0
     3d4:	80 80       	ld	r8, Z
     3d6:	88 70       	andi	r24, 0x08	; 8
     3d8:	08 08       	sbc	r0, r8
     3da:	68 98       	cbi	0x0d, 0	; 13
     3dc:	88 88       	ldd	r8, Y+16	; 0x10
     3de:	78 00       	.word	0x0078	; ????
     3e0:	00 70       	andi	r16, 0x00	; 0
     3e2:	88 f8       	.word	0xf888	; ????
     3e4:	80 70       	andi	r24, 0x00	; 0
     3e6:	30 48       	sbci	r19, 0x80	; 128
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	40 00       	.word	0x0040	; ????
     3ee:	00 78       	andi	r16, 0x80	; 128
     3f0:	88 78       	andi	r24, 0x88	; 136
     3f2:	08 30       	cpi	r16, 0x08	; 8
     3f4:	80 80       	ld	r8, Z
     3f6:	b0 c8       	rjmp	.-3744   	; 0xfffff558 <__eeprom_end+0xff7ef558>
     3f8:	88 88       	ldd	r8, Y+16	; 0x10
     3fa:	88 20       	and	r8, r8
     3fc:	00 60       	ori	r16, 0x00	; 0
     3fe:	20 20       	and	r2, r0
     400:	20 70       	andi	r18, 0x00	; 0
     402:	10 00       	.word	0x0010	; ????
     404:	30 10       	cpse	r3, r0
     406:	10 90 60 40 	lds	r1, 0x4060
     40a:	40 48       	sbci	r20, 0x80	; 128
     40c:	50 60       	ori	r21, 0x00	; 0
     40e:	50 48       	sbci	r21, 0x80	; 128
     410:	60 20       	and	r6, r0
     412:	20 20       	and	r2, r0
     414:	20 20       	and	r2, r0
     416:	70 00       	.word	0x0070	; ????
     418:	00 d0       	rcall	.+0      	; 0x41a <__trampolines_end+0x21e>
     41a:	a8 a8       	ldd	r10, Y+48	; 0x30
     41c:	88 88       	ldd	r8, Y+16	; 0x10
     41e:	00 00       	nop
     420:	b0 c8       	rjmp	.-3744   	; 0xfffff582 <__eeprom_end+0xff7ef582>
     422:	88 88       	ldd	r8, Y+16	; 0x10
     424:	88 00       	.word	0x0088	; ????
     426:	00 70       	andi	r16, 0x00	; 0
     428:	88 88       	ldd	r8, Y+16	; 0x10
     42a:	88 70       	andi	r24, 0x08	; 8
     42c:	00 00       	nop
     42e:	f0 88       	ldd	r15, Z+16	; 0x10
     430:	f0 80       	ld	r15, Z
     432:	80 00       	.word	0x0080	; ????
     434:	00 68       	ori	r16, 0x80	; 128
     436:	98 78       	andi	r25, 0x88	; 136
     438:	08 08       	sbc	r0, r8
     43a:	00 00       	nop
     43c:	b0 c8       	rjmp	.-3744   	; 0xfffff59e <__eeprom_end+0xff7ef59e>
     43e:	80 80       	ld	r8, Z
     440:	80 00       	.word	0x0080	; ????
     442:	00 70       	andi	r16, 0x00	; 0
     444:	80 70       	andi	r24, 0x00	; 0
     446:	08 f0       	brcs	.+2      	; 0x44a <__trampolines_end+0x24e>
     448:	40 40       	sbci	r20, 0x00	; 0
     44a:	e0 40       	sbci	r30, 0x00	; 0
     44c:	40 48       	sbci	r20, 0x80	; 128
     44e:	30 00       	.word	0x0030	; ????
     450:	00 88       	ldd	r0, Z+16	; 0x10
     452:	88 88       	ldd	r8, Y+16	; 0x10
     454:	98 68       	ori	r25, 0x88	; 136
     456:	00 00       	nop
     458:	88 88       	ldd	r8, Y+16	; 0x10
     45a:	88 50       	subi	r24, 0x08	; 8
     45c:	20 00       	.word	0x0020	; ????
     45e:	00 88       	ldd	r0, Z+16	; 0x10
     460:	88 a8       	ldd	r8, Y+48	; 0x30
     462:	a8 50       	subi	r26, 0x08	; 8
     464:	00 00       	nop
     466:	88 50       	subi	r24, 0x08	; 8
     468:	20 50       	subi	r18, 0x00	; 0
     46a:	88 00       	.word	0x0088	; ????
     46c:	00 88       	ldd	r0, Z+16	; 0x10
     46e:	88 78       	andi	r24, 0x88	; 136
     470:	08 70       	andi	r16, 0x08	; 8
     472:	00 00       	nop
     474:	f8 10       	cpse	r15, r8
     476:	20 40       	sbci	r18, 0x00	; 0
     478:	f8 10       	cpse	r15, r8
     47a:	20 20       	and	r2, r0
     47c:	40 20       	and	r4, r0
     47e:	20 10       	cpse	r2, r0
     480:	20 20       	and	r2, r0
     482:	20 20       	and	r2, r0
     484:	20 20       	and	r2, r0
     486:	20 40       	sbci	r18, 0x00	; 0
     488:	20 20       	and	r2, r0
     48a:	10 20       	and	r1, r0
     48c:	20 40       	sbci	r18, 0x00	; 0

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	cd bf       	out	0x3d, r28	; 61
     496:	df e5       	ldi	r29, 0x5F	; 95
     498:	de bf       	out	0x3e, r29	; 62
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	11 e2       	ldi	r17, 0x21	; 33
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b0 e2       	ldi	r27, 0x20	; 32
     4a4:	e4 ea       	ldi	r30, 0xA4	; 164
     4a6:	f5 e1       	ldi	r31, 0x15	; 21
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a8 3a       	cpi	r26, 0xA8	; 168
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	23 e2       	ldi	r18, 0x23	; 35
     4ba:	a8 ea       	ldi	r26, 0xA8	; 168
     4bc:	b1 e2       	ldi	r27, 0x21	; 33
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a3 3b       	cpi	r26, 0xB3	; 179
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	f1 d7       	rcall	.+4066   	; 0x14ac <main>
     4ca:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <_exit>

000004ce <__bad_interrupt>:
     4ce:	98 cd       	rjmp	.-1232   	; 0x0 <__vectors>

000004d0 <gfx_mono_st7565r_put_byte>:
	gfx_mono_st7565r_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_st7565r_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
     4d0:	1f 93       	push	r17
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	18 2f       	mov	r17, r24
     4d8:	d6 2f       	mov	r29, r22
     4da:	c4 2f       	mov	r28, r20
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_framebuffer_put_byte(page, column, data);
     4dc:	03 d1       	rcall	.+518    	; 0x6e4 <gfx_mono_framebuffer_put_byte>
 * \param address the page address
 */
static inline void st7565r_set_page_address(uint8_t address)
{
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
     4de:	1f 70       	andi	r17, 0x0F	; 15
	st7565r_write_command(ST7565R_CMD_PAGE_ADDRESS_SET(address));
     4e0:	10 6b       	ori	r17, 0xB0	; 176
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     4e2:	88 e0       	ldi	r24, 0x08	; 8
     4e4:	e0 ea       	ldi	r30, 0xA0	; 160
     4e6:	f6 e0       	ldi	r31, 0x06	; 6
     4e8:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	e0 e6       	ldi	r30, 0x60	; 96
     4ee:	f6 e0       	ldi	r31, 0x06	; 6
     4f0:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     4f2:	e0 ea       	ldi	r30, 0xA0	; 160
     4f4:	f9 e0       	ldi	r31, 0x09	; 9
     4f6:	91 81       	ldd	r25, Z+1	; 0x01
     4f8:	95 ff       	sbrs	r25, 5
     4fa:	fd cf       	rjmp	.-6      	; 0x4f6 <gfx_mono_st7565r_put_byte+0x26>
	ST7565R_USART_SPI.DATA = command;
     4fc:	10 93 a0 09 	sts	0x09A0, r17
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     500:	e0 ea       	ldi	r30, 0xA0	; 160
     502:	f9 e0       	ldi	r31, 0x09	; 9
     504:	81 81       	ldd	r24, Z+1	; 0x01
     506:	86 ff       	sbrs	r24, 6
     508:	fd cf       	rjmp	.-6      	; 0x504 <gfx_mono_st7565r_put_byte+0x34>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     50a:	e0 ea       	ldi	r30, 0xA0	; 160
     50c:	f9 e0       	ldi	r31, 0x09	; 9
     50e:	81 81       	ldd	r24, Z+1	; 0x01
     510:	80 64       	ori	r24, 0x40	; 64
     512:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     514:	80 81       	ld	r24, Z
     516:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     51a:	e0 ea       	ldi	r30, 0xA0	; 160
     51c:	f6 e0       	ldi	r31, 0x06	; 6
     51e:	88 e0       	ldi	r24, 0x08	; 8
     520:	85 83       	std	Z+5, r24	; 0x05
 * \param address the column address
 */
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
     522:	9d 2f       	mov	r25, r29
     524:	9f 77       	andi	r25, 0x7F	; 127
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
     526:	92 95       	swap	r25
     528:	9f 70       	andi	r25, 0x0F	; 15
     52a:	90 61       	ori	r25, 0x10	; 16
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     52c:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	e0 e6       	ldi	r30, 0x60	; 96
     532:	f6 e0       	ldi	r31, 0x06	; 6
     534:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     536:	e0 ea       	ldi	r30, 0xA0	; 160
     538:	f9 e0       	ldi	r31, 0x09	; 9
     53a:	81 81       	ldd	r24, Z+1	; 0x01
     53c:	85 ff       	sbrs	r24, 5
     53e:	fd cf       	rjmp	.-6      	; 0x53a <gfx_mono_st7565r_put_byte+0x6a>
	ST7565R_USART_SPI.DATA = command;
     540:	90 93 a0 09 	sts	0x09A0, r25
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     544:	e0 ea       	ldi	r30, 0xA0	; 160
     546:	f9 e0       	ldi	r31, 0x09	; 9
     548:	81 81       	ldd	r24, Z+1	; 0x01
     54a:	86 ff       	sbrs	r24, 6
     54c:	fd cf       	rjmp	.-6      	; 0x548 <gfx_mono_st7565r_put_byte+0x78>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     54e:	e0 ea       	ldi	r30, 0xA0	; 160
     550:	f9 e0       	ldi	r31, 0x09	; 9
     552:	81 81       	ldd	r24, Z+1	; 0x01
     554:	80 64       	ori	r24, 0x40	; 64
     556:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     558:	80 81       	ld	r24, Z
     55a:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     55e:	e0 ea       	ldi	r30, 0xA0	; 160
     560:	f6 e0       	ldi	r31, 0x06	; 6
     562:	88 e0       	ldi	r24, 0x08	; 8
     564:	85 83       	std	Z+5, r24	; 0x05
static inline void st7565r_set_column_address(uint8_t address)
{
	// Make sure the address is 7 bits
	address &= 0x7F;
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_MSB(address >> 4));
	st7565r_write_command(ST7565R_CMD_COLUMN_ADDRESS_SET_LSB(address & 0x0F));
     566:	df 70       	andi	r29, 0x0F	; 15
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     568:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	e0 e6       	ldi	r30, 0x60	; 96
     56e:	f6 e0       	ldi	r31, 0x06	; 6
     570:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     572:	e0 ea       	ldi	r30, 0xA0	; 160
     574:	f9 e0       	ldi	r31, 0x09	; 9
     576:	81 81       	ldd	r24, Z+1	; 0x01
     578:	85 ff       	sbrs	r24, 5
     57a:	fd cf       	rjmp	.-6      	; 0x576 <gfx_mono_st7565r_put_byte+0xa6>
	ST7565R_USART_SPI.DATA = command;
     57c:	d0 93 a0 09 	sts	0x09A0, r29
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     580:	e0 ea       	ldi	r30, 0xA0	; 160
     582:	f9 e0       	ldi	r31, 0x09	; 9
     584:	81 81       	ldd	r24, Z+1	; 0x01
     586:	86 ff       	sbrs	r24, 6
     588:	fd cf       	rjmp	.-6      	; 0x584 <gfx_mono_st7565r_put_byte+0xb4>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     58a:	e0 ea       	ldi	r30, 0xA0	; 160
     58c:	f9 e0       	ldi	r31, 0x09	; 9
     58e:	81 81       	ldd	r24, Z+1	; 0x01
     590:	80 64       	ori	r24, 0x40	; 64
     592:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     594:	80 81       	ld	r24, Z
     596:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     59a:	e0 ea       	ldi	r30, 0xA0	; 160
     59c:	f6 e0       	ldi	r31, 0x06	; 6
     59e:	88 e0       	ldi	r24, 0x08	; 8
     5a0:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param data the data to write
 */
static inline void st7565r_write_data(uint8_t data)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     5a2:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTSET = ST7565R_A0_PIN;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	e0 e6       	ldi	r30, 0x60	; 96
     5a8:	f6 e0       	ldi	r31, 0x06	; 6
     5aa:	85 83       	std	Z+5, r24	; 0x05
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     5ac:	e0 ea       	ldi	r30, 0xA0	; 160
     5ae:	f9 e0       	ldi	r31, 0x09	; 9
     5b0:	81 81       	ldd	r24, Z+1	; 0x01
     5b2:	85 ff       	sbrs	r24, 5
     5b4:	fd cf       	rjmp	.-6      	; 0x5b0 <gfx_mono_st7565r_put_byte+0xe0>
	ST7565R_USART_SPI.DATA = data;
     5b6:	c0 93 a0 09 	sts	0x09A0, r28
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     5ba:	e0 ea       	ldi	r30, 0xA0	; 160
     5bc:	f9 e0       	ldi	r31, 0x09	; 9
     5be:	81 81       	ldd	r24, Z+1	; 0x01
     5c0:	86 ff       	sbrs	r24, 6
     5c2:	fd cf       	rjmp	.-6      	; 0x5be <gfx_mono_st7565r_put_byte+0xee>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     5c4:	e0 ea       	ldi	r30, 0xA0	; 160
     5c6:	f9 e0       	ldi	r31, 0x09	; 9
     5c8:	81 81       	ldd	r24, Z+1	; 0x01
     5ca:	80 64       	ori	r24, 0x40	; 64
     5cc:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     5ce:	80 81       	ld	r24, Z
     5d0:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	e0 e6       	ldi	r30, 0x60	; 96
     5d8:	f6 e0       	ldi	r31, 0x06	; 6
     5da:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     5dc:	88 e0       	ldi	r24, 0x08	; 8
     5de:	e0 ea       	ldi	r30, 0xA0	; 160
     5e0:	f6 e0       	ldi	r31, 0x06	; 6
     5e2:	85 83       	std	Z+5, r24	; 0x05

	st7565r_set_page_address(page);
	st7565r_set_column_address(column);

	st7565r_write_data(data);
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	08 95       	ret

000005ec <gfx_mono_st7565r_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_ST7565R_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
     5f0:	88 ea       	ldi	r24, 0xA8	; 168
     5f2:	91 e2       	ldi	r25, 0x21	; 33
     5f4:	72 d0       	rcall	.+228    	; 0x6da <gfx_mono_set_framebuffer>
#endif

	/* Initialize the low-level display controller. */
	st7565r_init();
     5f6:	a5 d1       	rcall	.+842    	; 0x942 <st7565r_init>
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     5f8:	88 e0       	ldi	r24, 0x08	; 8
     5fa:	e0 ea       	ldi	r30, 0xA0	; 160
     5fc:	f6 e0       	ldi	r31, 0x06	; 6
     5fe:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	e0 e6       	ldi	r30, 0x60	; 96
     604:	f6 e0       	ldi	r31, 0x06	; 6
     606:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     608:	e0 ea       	ldi	r30, 0xA0	; 160
     60a:	f9 e0       	ldi	r31, 0x09	; 9
     60c:	81 81       	ldd	r24, Z+1	; 0x01
     60e:	85 ff       	sbrs	r24, 5
     610:	fd cf       	rjmp	.-6      	; 0x60c <gfx_mono_st7565r_init+0x20>
	ST7565R_USART_SPI.DATA = command;
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	80 93 a0 09 	sts	0x09A0, r24
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     618:	e0 ea       	ldi	r30, 0xA0	; 160
     61a:	f9 e0       	ldi	r31, 0x09	; 9
     61c:	81 81       	ldd	r24, Z+1	; 0x01
     61e:	86 ff       	sbrs	r24, 6
     620:	fd cf       	rjmp	.-6      	; 0x61c <gfx_mono_st7565r_init+0x30>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     622:	e0 ea       	ldi	r30, 0xA0	; 160
     624:	f9 e0       	ldi	r31, 0x09	; 9
     626:	81 81       	ldd	r24, Z+1	; 0x01
     628:	80 64       	ori	r24, 0x40	; 64
     62a:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     62c:	80 81       	ld	r24, Z
     62e:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     632:	88 e0       	ldi	r24, 0x08	; 8
     634:	e0 ea       	ldi	r30, 0xA0	; 160
     636:	f6 e0       	ldi	r31, 0x06	; 6
     638:	85 83       	std	Z+5, r24	; 0x05

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     63a:	d0 e0       	ldi	r29, 0x00	; 0
     63c:	0a c0       	rjmp	.+20     	; 0x652 <gfx_mono_st7565r_init+0x66>
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	6c 2f       	mov	r22, r28
     642:	8d 2f       	mov	r24, r29
     644:	45 df       	rcall	.-374    	; 0x4d0 <gfx_mono_st7565r_put_byte>
	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
     646:	cf 5f       	subi	r28, 0xFF	; 255
     648:	c0 38       	cpi	r28, 0x80	; 128
     64a:	c9 f7       	brne	.-14     	; 0x63e <gfx_mono_st7565r_init+0x52>

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
     64c:	df 5f       	subi	r29, 0xFF	; 255
     64e:	d4 30       	cpi	r29, 0x04	; 4
     650:	11 f0       	breq	.+4      	; 0x656 <gfx_mono_st7565r_init+0x6a>
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_st7565r_init(void)
{
     652:	c0 e0       	ldi	r28, 0x00	; 0
     654:	f4 cf       	rjmp	.-24     	; 0x63e <gfx_mono_st7565r_init+0x52>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
		for (column = 0; column < GFX_MONO_LCD_WIDTH; column++) {
			gfx_mono_put_byte(page, column, 0x00);
		}
	}
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	08 95       	ret

0000065c <gfx_mono_st7565r_draw_pixel>:
	gfx_mono_st7565r_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_st7565r_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	18 2f       	mov	r17, r24
     668:	04 2f       	mov	r16, r20
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
     66a:	88 23       	and	r24, r24
     66c:	74 f1       	brlt	.+92     	; 0x6ca <gfx_mono_st7565r_draw_pixel+0x6e>
     66e:	60 32       	cpi	r22, 0x20	; 32
     670:	60 f5       	brcc	.+88     	; 0x6ca <gfx_mono_st7565r_draw_pixel+0x6e>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
     672:	f6 2e       	mov	r15, r22
     674:	f6 94       	lsr	r15
     676:	f6 94       	lsr	r15
     678:	f6 94       	lsr	r15
	pixel_mask = (1 << (y - (page * 8)));
     67a:	2f 2d       	mov	r18, r15
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	31 95       	neg	r19
     680:	21 95       	neg	r18
     682:	31 09       	sbc	r19, r1
     684:	22 0f       	add	r18, r18
     686:	33 1f       	adc	r19, r19
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	22 0f       	add	r18, r18
     68e:	33 1f       	adc	r19, r19
     690:	26 0f       	add	r18, r22
     692:	31 1d       	adc	r19, r1
     694:	e1 e0       	ldi	r30, 0x01	; 1
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	ef 01       	movw	r28, r30
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <gfx_mono_st7565r_draw_pixel+0x44>
     69c:	cc 0f       	add	r28, r28
     69e:	dd 1f       	adc	r29, r29
     6a0:	2a 95       	dec	r18
     6a2:	e2 f7       	brpl	.-8      	; 0x69c <gfx_mono_st7565r_draw_pixel+0x40>
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     6a4:	68 2f       	mov	r22, r24
     6a6:	8f 2d       	mov	r24, r15
     6a8:	2c d0       	rcall	.+88     	; 0x702 <gfx_mono_framebuffer_get_byte>
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);

	switch (color) {
     6aa:	01 30       	cpi	r16, 0x01	; 1
     6ac:	21 f0       	breq	.+8      	; 0x6b6 <gfx_mono_st7565r_draw_pixel+0x5a>
     6ae:	28 f0       	brcs	.+10     	; 0x6ba <gfx_mono_st7565r_draw_pixel+0x5e>
     6b0:	02 30       	cpi	r16, 0x02	; 2
     6b2:	31 f0       	breq	.+12     	; 0x6c0 <gfx_mono_st7565r_draw_pixel+0x64>
     6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <gfx_mono_st7565r_draw_pixel+0x66>
	case GFX_PIXEL_SET:
		pixel_value |= pixel_mask;
     6b6:	8c 2b       	or	r24, r28
		break;
     6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <gfx_mono_st7565r_draw_pixel+0x66>

	case GFX_PIXEL_CLR:
		pixel_value &= ~pixel_mask;
     6ba:	c0 95       	com	r28
     6bc:	8c 23       	and	r24, r28
		break;
     6be:	01 c0       	rjmp	.+2      	; 0x6c2 <gfx_mono_st7565r_draw_pixel+0x66>

	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
     6c0:	8c 27       	eor	r24, r28

	default:
		break;
	}

	gfx_mono_put_byte(page, x, pixel_value);
     6c2:	48 2f       	mov	r20, r24
     6c4:	61 2f       	mov	r22, r17
     6c6:	8f 2d       	mov	r24, r15
     6c8:	03 df       	rcall	.-506    	; 0x4d0 <gfx_mono_st7565r_put_byte>
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	08 95       	ret

000006d6 <gfx_mono_st7565r_get_byte>:
\endcode
 */
uint8_t gfx_mono_st7565r_get_byte(gfx_coord_t page, gfx_coord_t column)
{
#ifdef CONFIG_ST7565R_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
     6d6:	15 c0       	rjmp	.+42     	; 0x702 <gfx_mono_framebuffer_get_byte>
	st7565r_set_column_address(column);

	return st7565r_read_data();

#endif
}
     6d8:	08 95       	ret

000006da <gfx_mono_set_framebuffer>:
	gfx_coord_t *framebuffer_pt = fbpointer +
			((page * GFX_MONO_LCD_WIDTH) + column);
	do {
		*data++ = *framebuffer_pt++;
	} while (--width > 0);
}
     6da:	80 93 a8 23 	sts	0x23A8, r24
     6de:	90 93 a9 23 	sts	0x23A9, r25
     6e2:	08 95       	ret

000006e4 <gfx_mono_framebuffer_put_byte>:
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
     6e4:	20 e8       	ldi	r18, 0x80	; 128
     6e6:	82 9f       	mul	r24, r18
     6e8:	c0 01       	movw	r24, r0
     6ea:	11 24       	eor	r1, r1
     6ec:	fc 01       	movw	r30, r24
     6ee:	e6 0f       	add	r30, r22
     6f0:	f1 1d       	adc	r31, r1
     6f2:	80 91 a8 23 	lds	r24, 0x23A8
     6f6:	90 91 a9 23 	lds	r25, 0x23A9
     6fa:	e8 0f       	add	r30, r24
     6fc:	f9 1f       	adc	r31, r25
     6fe:	40 83       	st	Z, r20
     700:	08 95       	ret

00000702 <gfx_mono_framebuffer_get_byte>:
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
     702:	20 e8       	ldi	r18, 0x80	; 128
     704:	82 9f       	mul	r24, r18
     706:	c0 01       	movw	r24, r0
     708:	11 24       	eor	r1, r1
     70a:	fc 01       	movw	r30, r24
     70c:	e6 0f       	add	r30, r22
     70e:	f1 1d       	adc	r31, r1
     710:	80 91 a8 23 	lds	r24, 0x23A8
     714:	90 91 a9 23 	lds	r25, 0x23A9
     718:	e8 0f       	add	r30, r24
     71a:	f9 1f       	adc	r31, r25
}
     71c:	80 81       	ld	r24, Z
     71e:	08 95       	ret

00000720 <gfx_mono_generic_draw_horizontal_line>:
	gfx_mono_draw_horizontal_line(x, y, width, color);
	gfx_mono_draw_horizontal_line(x, y + height - 1, width, color);

	gfx_mono_draw_vertical_line(x, y, height, color);
	gfx_mono_draw_vertical_line(x + width - 1, y, height, color);
}
     720:	ff 92       	push	r15
     722:	0f 93       	push	r16
     724:	1f 93       	push	r17
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	e4 2f       	mov	r30, r20
     72c:	f0 e0       	ldi	r31, 0x00	; 0
     72e:	e8 0f       	add	r30, r24
     730:	f1 1d       	adc	r31, r1
     732:	e1 38       	cpi	r30, 0x81	; 129
     734:	f1 05       	cpc	r31, r1
     736:	14 f0       	brlt	.+4      	; 0x73c <gfx_mono_generic_draw_horizontal_line+0x1c>
     738:	40 e8       	ldi	r20, 0x80	; 128
     73a:	48 1b       	sub	r20, r24
     73c:	44 23       	and	r20, r20
     73e:	09 f4       	brne	.+2      	; 0x742 <gfx_mono_generic_draw_horizontal_line+0x22>
     740:	59 c0       	rjmp	.+178    	; 0x7f4 <gfx_mono_generic_draw_horizontal_line+0xd4>
     742:	c6 2f       	mov	r28, r22
     744:	c6 95       	lsr	r28
     746:	c6 95       	lsr	r28
     748:	c6 95       	lsr	r28
     74a:	ec 2f       	mov	r30, r28
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	f1 95       	neg	r31
     750:	e1 95       	neg	r30
     752:	f1 09       	sbc	r31, r1
     754:	ee 0f       	add	r30, r30
     756:	ff 1f       	adc	r31, r31
     758:	ee 0f       	add	r30, r30
     75a:	ff 1f       	adc	r31, r31
     75c:	ee 0f       	add	r30, r30
     75e:	ff 1f       	adc	r31, r31
     760:	df 01       	movw	r26, r30
     762:	a6 0f       	add	r26, r22
     764:	b1 1d       	adc	r27, r1
     766:	bd 01       	movw	r22, r26
     768:	e1 e0       	ldi	r30, 0x01	; 1
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	df 01       	movw	r26, r30
     76e:	02 c0       	rjmp	.+4      	; 0x774 <gfx_mono_generic_draw_horizontal_line+0x54>
     770:	aa 0f       	add	r26, r26
     772:	bb 1f       	adc	r27, r27
     774:	6a 95       	dec	r22
     776:	e2 f7       	brpl	.-8      	; 0x770 <gfx_mono_generic_draw_horizontal_line+0x50>
     778:	0a 2f       	mov	r16, r26
     77a:	21 30       	cpi	r18, 0x01	; 1
     77c:	49 f0       	breq	.+18     	; 0x790 <gfx_mono_generic_draw_horizontal_line+0x70>
     77e:	68 f0       	brcs	.+26     	; 0x79a <gfx_mono_generic_draw_horizontal_line+0x7a>
     780:	22 30       	cpi	r18, 0x02	; 2
     782:	09 f0       	breq	.+2      	; 0x786 <gfx_mono_generic_draw_horizontal_line+0x66>
     784:	37 c0       	rjmp	.+110    	; 0x7f4 <gfx_mono_generic_draw_horizontal_line+0xd4>
     786:	d4 2f       	mov	r29, r20
     788:	ff 24       	eor	r15, r15
     78a:	fa 94       	dec	r15
     78c:	f8 0e       	add	r15, r24
     78e:	26 c0       	rjmp	.+76     	; 0x7dc <gfx_mono_generic_draw_horizontal_line+0xbc>
     790:	d4 2f       	mov	r29, r20
     792:	ff 24       	eor	r15, r15
     794:	fa 94       	dec	r15
     796:	f8 0e       	add	r15, r24
     798:	07 c0       	rjmp	.+14     	; 0x7a8 <gfx_mono_generic_draw_horizontal_line+0x88>
     79a:	d4 2f       	mov	r29, r20
     79c:	ff 24       	eor	r15, r15
     79e:	fa 94       	dec	r15
     7a0:	f8 0e       	add	r15, r24
     7a2:	0a 2f       	mov	r16, r26
     7a4:	00 95       	com	r16
     7a6:	0d c0       	rjmp	.+26     	; 0x7c2 <gfx_mono_generic_draw_horizontal_line+0xa2>
     7a8:	1f 2d       	mov	r17, r15
     7aa:	1d 0f       	add	r17, r29
     7ac:	61 2f       	mov	r22, r17
     7ae:	8c 2f       	mov	r24, r28
     7b0:	92 df       	rcall	.-220    	; 0x6d6 <gfx_mono_st7565r_get_byte>
     7b2:	48 2f       	mov	r20, r24
     7b4:	40 2b       	or	r20, r16
     7b6:	61 2f       	mov	r22, r17
     7b8:	8c 2f       	mov	r24, r28
     7ba:	8a de       	rcall	.-748    	; 0x4d0 <gfx_mono_st7565r_put_byte>
     7bc:	d1 50       	subi	r29, 0x01	; 1
     7be:	a1 f7       	brne	.-24     	; 0x7a8 <gfx_mono_generic_draw_horizontal_line+0x88>
     7c0:	19 c0       	rjmp	.+50     	; 0x7f4 <gfx_mono_generic_draw_horizontal_line+0xd4>
     7c2:	1f 2d       	mov	r17, r15
     7c4:	1d 0f       	add	r17, r29
     7c6:	61 2f       	mov	r22, r17
     7c8:	8c 2f       	mov	r24, r28
     7ca:	85 df       	rcall	.-246    	; 0x6d6 <gfx_mono_st7565r_get_byte>
     7cc:	48 2f       	mov	r20, r24
     7ce:	40 23       	and	r20, r16
     7d0:	61 2f       	mov	r22, r17
     7d2:	8c 2f       	mov	r24, r28
     7d4:	7d de       	rcall	.-774    	; 0x4d0 <gfx_mono_st7565r_put_byte>
     7d6:	d1 50       	subi	r29, 0x01	; 1
     7d8:	a1 f7       	brne	.-24     	; 0x7c2 <gfx_mono_generic_draw_horizontal_line+0xa2>
     7da:	0c c0       	rjmp	.+24     	; 0x7f4 <gfx_mono_generic_draw_horizontal_line+0xd4>
     7dc:	1f 2d       	mov	r17, r15
     7de:	1d 0f       	add	r17, r29
     7e0:	61 2f       	mov	r22, r17
     7e2:	8c 2f       	mov	r24, r28
     7e4:	78 df       	rcall	.-272    	; 0x6d6 <gfx_mono_st7565r_get_byte>
     7e6:	48 2f       	mov	r20, r24
     7e8:	40 27       	eor	r20, r16
     7ea:	61 2f       	mov	r22, r17
     7ec:	8c 2f       	mov	r24, r28
     7ee:	70 de       	rcall	.-800    	; 0x4d0 <gfx_mono_st7565r_put_byte>
     7f0:	d1 50       	subi	r29, 0x01	; 1
     7f2:	a1 f7       	brne	.-24     	; 0x7dc <gfx_mono_generic_draw_horizontal_line+0xbc>
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	08 95       	ret

00000800 <gfx_mono_generic_draw_filled_rect>:
 * \param  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
     800:	ff 92       	push	r15
     802:	0f 93       	push	r16
     804:	1f 93       	push	r17
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	d8 2f       	mov	r29, r24
     80c:	14 2f       	mov	r17, r20
	if (height == 0) {
     80e:	22 23       	and	r18, r18
     810:	61 f0       	breq	.+24     	; 0x82a <gfx_mono_generic_draw_filled_rect+0x2a>
     812:	c2 2f       	mov	r28, r18
     814:	ff 24       	eor	r15, r15
     816:	fa 94       	dec	r15
     818:	f6 0e       	add	r15, r22
     81a:	6f 2d       	mov	r22, r15
     81c:	6c 0f       	add	r22, r28
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
     81e:	20 2f       	mov	r18, r16
     820:	41 2f       	mov	r20, r17
     822:	8d 2f       	mov	r24, r29
     824:	7d df       	rcall	.-262    	; 0x720 <gfx_mono_generic_draw_horizontal_line>
     826:	c1 50       	subi	r28, 0x01	; 1
	if (height == 0) {
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
     828:	c1 f7       	brne	.-16     	; 0x81a <gfx_mono_generic_draw_filled_rect+0x1a>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
	}
}
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	1f 91       	pop	r17
     830:	0f 91       	pop	r16
     832:	ff 90       	pop	r15
     834:	08 95       	ret

00000836 <gfx_mono_draw_char>:
 * \param y        Y coordinate on screen.
 * \param font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
     836:	af 92       	push	r10
     838:	bf 92       	push	r11
     83a:	cf 92       	push	r12
     83c:	df 92       	push	r13
     83e:	ef 92       	push	r14
     840:	ff 92       	push	r15
     842:	0f 93       	push	r16
     844:	1f 93       	push	r17
     846:	cf 93       	push	r28
     848:	df 93       	push	r29
     84a:	c8 2f       	mov	r28, r24
     84c:	d6 2e       	mov	r13, r22
     84e:	a4 2e       	mov	r10, r20
     850:	79 01       	movw	r14, r18
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
     852:	00 e0       	ldi	r16, 0x00	; 0
     854:	f9 01       	movw	r30, r18
     856:	24 81       	ldd	r18, Z+4	; 0x04
     858:	43 81       	ldd	r20, Z+3	; 0x03
     85a:	6a 2d       	mov	r22, r10
     85c:	8d 2d       	mov	r24, r13
     85e:	d0 df       	rcall	.-96     	; 0x800 <gfx_mono_generic_draw_filled_rect>
			GFX_PIXEL_CLR);

	switch (font->type) {
     860:	f7 01       	movw	r30, r14
     862:	90 81       	ld	r25, Z
     864:	91 11       	cpse	r25, r1
     866:	39 c0       	rjmp	.+114    	; 0x8da <gfx_mono_draw_char+0xa4>
	uint8_t i;

	gfx_coord_t inc_x = x;
	gfx_coord_t inc_y = y;

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
     868:	83 81       	ldd	r24, Z+3	; 0x03
     86a:	a8 2f       	mov	r26, r24
     86c:	a6 95       	lsr	r26
     86e:	a6 95       	lsr	r26
     870:	a6 95       	lsr	r26
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
     872:	87 70       	andi	r24, 0x07	; 7
     874:	09 f0       	breq	.+2      	; 0x878 <gfx_mono_draw_char+0x42>
		char_row_size++;
     876:	af 5f       	subi	r26, 0xFF	; 255
	}

	glyph_data_offset = char_row_size * font->height *
     878:	f7 01       	movw	r30, r14
     87a:	c4 80       	ldd	r12, Z+4	; 0x04
     87c:	ac 9d       	mul	r26, r12
     87e:	d0 01       	movw	r26, r0
     880:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
     882:	ec 2f       	mov	r30, r28
     884:	f0 e0       	ldi	r31, 0x00	; 0
     886:	e7 01       	movw	r28, r14
     888:	8d 81       	ldd	r24, Y+5	; 0x05
     88a:	e8 1b       	sub	r30, r24
     88c:	f1 09       	sbc	r31, r1
	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
		char_row_size++;
	}

	glyph_data_offset = char_row_size * font->height *
     88e:	ae 9f       	mul	r26, r30
     890:	90 01       	movw	r18, r0
     892:	af 9f       	mul	r26, r31
     894:	30 0d       	add	r19, r0
     896:	be 9f       	mul	r27, r30
     898:	30 0d       	add	r19, r0
     89a:	11 24       	eor	r1, r1
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
     89c:	09 80       	ldd	r0, Y+1	; 0x01
     89e:	da 81       	ldd	r29, Y+2	; 0x02
     8a0:	c0 2d       	mov	r28, r0
     8a2:	c2 0f       	add	r28, r18
     8a4:	d3 1f       	adc	r29, r19
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;
     8a6:	f7 01       	movw	r30, r14
     8a8:	b3 80       	ldd	r11, Z+3	; 0x03

		for (i = 0; i < pixelsToDraw; i++) {
     8aa:	bb 20       	and	r11, r11
     8ac:	99 f0       	breq	.+38     	; 0x8d4 <gfx_mono_draw_char+0x9e>
			((uint8_t)ch - font->first_char);
	glyph_data = font->data.progmem + glyph_data_offset;
	rows_left = font->height;

	do {
		uint8_t glyph_byte = 0;
     8ae:	00 e0       	ldi	r16, 0x00	; 0
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	81 2f       	mov	r24, r17
     8b4:	8d 0d       	add	r24, r13
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
     8b6:	91 2f       	mov	r25, r17
     8b8:	97 70       	andi	r25, 0x07	; 7
     8ba:	19 f4       	brne	.+6      	; 0x8c2 <gfx_mono_draw_char+0x8c>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
     8bc:	fe 01       	movw	r30, r28
     8be:	04 91       	lpm	r16, Z
				glyph_data++;
     8c0:	21 96       	adiw	r28, 0x01	; 1
			}

			if ((glyph_byte & 0x80)) {
     8c2:	00 23       	and	r16, r16
     8c4:	1c f4       	brge	.+6      	; 0x8cc <gfx_mono_draw_char+0x96>
				gfx_mono_draw_pixel(inc_x, inc_y,
     8c6:	41 e0       	ldi	r20, 0x01	; 1
     8c8:	6a 2d       	mov	r22, r10
     8ca:	c8 de       	rcall	.-624    	; 0x65c <gfx_mono_st7565r_draw_pixel>
						GFX_PIXEL_SET);
			}

			inc_x += 1;
			glyph_byte <<= 1;
     8cc:	00 0f       	add	r16, r16

	do {
		uint8_t glyph_byte = 0;
		uint8_t pixelsToDraw = font->width;

		for (i = 0; i < pixelsToDraw; i++) {
     8ce:	1f 5f       	subi	r17, 0xFF	; 255
     8d0:	1b 11       	cpse	r17, r11
     8d2:	ef cf       	rjmp	.-34     	; 0x8b2 <gfx_mono_draw_char+0x7c>

			inc_x += 1;
			glyph_byte <<= 1;
		}

		inc_y += 1;
     8d4:	a3 94       	inc	r10
		inc_x = x;
		rows_left--;
     8d6:	ca 94       	dec	r12
	} while (rows_left > 0);
     8d8:	31 f7       	brne	.-52     	; 0x8a6 <gfx_mono_draw_char+0x70>
#endif
	default:
		/* Unsupported mode, call assert */
		break;
	}
}
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	0f 91       	pop	r16
     8e2:	ff 90       	pop	r15
     8e4:	ef 90       	pop	r14
     8e6:	df 90       	pop	r13
     8e8:	cf 90       	pop	r12
     8ea:	bf 90       	pop	r11
     8ec:	af 90       	pop	r10
     8ee:	08 95       	ret

000008f0 <gfx_mono_draw_string>:
 * \param y         Y coordinate on screen.
 * \param font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
     8f0:	df 92       	push	r13
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	e4 2e       	mov	r14, r20
     900:	89 01       	movw	r16, r18
     902:	ec 01       	movw	r28, r24
     904:	f6 2e       	mov	r15, r22

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     906:	d6 2e       	mov	r13, r22
	const gfx_coord_t start_of_string_position_x = x;

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
     908:	89 91       	ld	r24, Y+
     90a:	8a 30       	cpi	r24, 0x0A	; 10
     90c:	31 f4       	brne	.+12     	; 0x91a <gfx_mono_draw_string+0x2a>
			x = start_of_string_position_x;
			y += font->height + 1;
     90e:	f8 01       	movw	r30, r16
     910:	84 81       	ldd	r24, Z+4	; 0x04
     912:	8f 5f       	subi	r24, 0xFF	; 255
     914:	e8 0e       	add	r14, r24

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
			x = start_of_string_position_x;
     916:	fd 2c       	mov	r15, r13
     918:	09 c0       	rjmp	.+18     	; 0x92c <gfx_mono_draw_string+0x3c>
			y += font->height + 1;
		} else if (*str == '\r') {
     91a:	8d 30       	cpi	r24, 0x0D	; 13
     91c:	39 f0       	breq	.+14     	; 0x92c <gfx_mono_draw_string+0x3c>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
     91e:	98 01       	movw	r18, r16
     920:	4e 2d       	mov	r20, r14
     922:	6f 2d       	mov	r22, r15
     924:	88 df       	rcall	.-240    	; 0x836 <gfx_mono_draw_char>
			x += font->width;
     926:	f8 01       	movw	r30, r16
     928:	83 81       	ldd	r24, Z+3	; 0x03
     92a:	f8 0e       	add	r15, r24
		}
	} while (*(++str));
     92c:	88 81       	ld	r24, Y
     92e:	81 11       	cpse	r24, r1
     930:	eb cf       	rjmp	.-42     	; 0x908 <gfx_mono_draw_string+0x18>
}
     932:	df 91       	pop	r29
     934:	cf 91       	pop	r28
     936:	1f 91       	pop	r17
     938:	0f 91       	pop	r16
     93a:	ff 90       	pop	r15
     93c:	ef 90       	pop	r14
     93e:	df 90       	pop	r13
     940:	08 95       	ret

00000942 <st7565r_init>:
 * Call this function to initialize the hardware interface and the LCD
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void st7565r_init(void)
{
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
 * \note this functions should not be confused with the \ref st7565r_soft_reset()
 * function, this command will control the RST pin.
 */
static inline void st7565r_hard_reset(void)
{
	ST7565R_RESET_PORT.OUTCLR = ST7565R_RESET_PIN;
     946:	88 e0       	ldi	r24, 0x08	; 8
     948:	e0 e0       	ldi	r30, 0x00	; 0
     94a:	f6 e0       	ldi	r31, 0x06	; 6
     94c:	86 83       	std	Z+6, r24	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     94e:	8a e6       	ldi	r24, 0x6A	; 106
     950:	8a 95       	dec	r24
     952:	f1 f7       	brne	.-4      	; 0x950 <st7565r_init+0xe>
     954:	00 c0       	rjmp	.+0      	; 0x956 <st7565r_init+0x14>
	_delay_us(10);
	ST7565R_RESET_PORT.OUTSET = ST7565R_RESET_PIN;
     956:	88 e0       	ldi	r24, 0x08	; 8
     958:	85 83       	std	Z+5, r24	; 0x05
     95a:	ca e6       	ldi	r28, 0x6A	; 106
     95c:	ca 95       	dec	r28
     95e:	f1 f7       	brne	.-4      	; 0x95c <st7565r_init+0x1a>
     960:	00 c0       	rjmp	.+0      	; 0x962 <st7565r_init+0x20>
 * Depending on what interface used for interfacing the LCD controller this
 * function will initialize the necessary hardware.
 */
static void st7565r_interface_init(void)
{
	ST7565R_MOSI_PORT.DIRSET = ST7565R_MOSI_PIN | ST7565R_SCK_PIN | ST7565R_A0_PIN;
     962:	e0 e6       	ldi	r30, 0x60	; 96
     964:	f6 e0       	ldi	r31, 0x06	; 6
     966:	3b e0       	ldi	r19, 0x0B	; 11
     968:	31 83       	std	Z+1, r19	; 0x01
	ST7565R_CS_PORT.DIRSET = ST7565R_CS_PIN;
     96a:	a0 ea       	ldi	r26, 0xA0	; 160
     96c:	b6 e0       	ldi	r27, 0x06	; 6
     96e:	28 e0       	ldi	r18, 0x08	; 8
     970:	11 96       	adiw	r26, 0x01	; 1
     972:	2c 93       	st	X, r18
     974:	11 97       	sbiw	r26, 0x01	; 1
	ST7565R_RESET_PORT.DIRSET = ST7565R_RESET_PIN;
     976:	60 e0       	ldi	r22, 0x00	; 0
     978:	76 e0       	ldi	r23, 0x06	; 6
     97a:	eb 01       	movw	r28, r22
     97c:	29 83       	std	Y+1, r18	; 0x01
	ST7565R_BACKLIGHT_PORT.DIRSET = ST7565R_BACKLIGHT_PIN;
     97e:	40 e1       	ldi	r20, 0x10	; 16
     980:	80 e8       	ldi	r24, 0x80	; 128
     982:	96 e0       	ldi	r25, 0x06	; 6
     984:	ec 01       	movw	r28, r24
     986:	49 83       	std	Y+1, r20	; 0x01
	ST7565R_MOSI_PORT.OUTSET = ST7565R_MOSI_PIN | ST7565R_SCK_PIN | ST7565R_A0_PIN;
     988:	35 83       	std	Z+5, r19	; 0x05
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     98a:	15 96       	adiw	r26, 0x05	; 5
     98c:	2c 93       	st	X, r18
     98e:	15 97       	sbiw	r26, 0x05	; 5
	ST7565R_RESET_PORT.OUTSET = ST7565R_RESET_PIN;
     990:	eb 01       	movw	r28, r22
     992:	2d 83       	std	Y+5, r18	; 0x05
	
	ST7565R_USART_SPI.CTRLB = USART_RXEN_bm | USART_TXEN_bm;
     994:	c0 ea       	ldi	r28, 0xA0	; 160
     996:	d9 e0       	ldi	r29, 0x09	; 9
     998:	88 e1       	ldi	r24, 0x18	; 24
     99a:	8c 83       	std	Y+4, r24	; 0x04
	ST7565R_USART_SPI.CTRLC |= USART_CMODE_MSPI_gc;
     99c:	8d 81       	ldd	r24, Y+5	; 0x05
     99e:	80 6c       	ori	r24, 0xC0	; 192
     9a0:	8d 83       	std	Y+5, r24	; 0x05
	// Initialize the interface
	st7565r_interface_init();

	// Set the A0 pin to the default state (command)
	//ioport_set_pin_low(ST7565R_A0_PIN);
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	86 83       	std	Z+6, r24	; 0x06
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     9a6:	16 96       	adiw	r26, 0x06	; 6
     9a8:	2c 93       	st	X, r18
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     9aa:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     9ac:	e0 ea       	ldi	r30, 0xA0	; 160
     9ae:	f9 e0       	ldi	r31, 0x09	; 9
     9b0:	81 81       	ldd	r24, Z+1	; 0x01
     9b2:	85 ff       	sbrs	r24, 5
     9b4:	fd cf       	rjmp	.-6      	; 0x9b0 <st7565r_init+0x6e>
	ST7565R_USART_SPI.DATA = command;
     9b6:	80 ea       	ldi	r24, 0xA0	; 160
     9b8:	80 93 a0 09 	sts	0x09A0, r24
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     9bc:	e0 ea       	ldi	r30, 0xA0	; 160
     9be:	f9 e0       	ldi	r31, 0x09	; 9
     9c0:	81 81       	ldd	r24, Z+1	; 0x01
     9c2:	86 ff       	sbrs	r24, 6
     9c4:	fd cf       	rjmp	.-6      	; 0x9c0 <st7565r_init+0x7e>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     9c6:	e0 ea       	ldi	r30, 0xA0	; 160
     9c8:	f9 e0       	ldi	r31, 0x09	; 9
     9ca:	81 81       	ldd	r24, Z+1	; 0x01
     9cc:	80 64       	ori	r24, 0x40	; 64
     9ce:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     9d0:	80 81       	ld	r24, Z
     9d2:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     9d6:	e0 ea       	ldi	r30, 0xA0	; 160
     9d8:	f6 e0       	ldi	r31, 0x06	; 6
     9da:	88 e0       	ldi	r24, 0x08	; 8
     9dc:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     9de:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	e0 e6       	ldi	r30, 0x60	; 96
     9e4:	f6 e0       	ldi	r31, 0x06	; 6
     9e6:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     9e8:	e0 ea       	ldi	r30, 0xA0	; 160
     9ea:	f9 e0       	ldi	r31, 0x09	; 9
     9ec:	81 81       	ldd	r24, Z+1	; 0x01
     9ee:	85 ff       	sbrs	r24, 5
     9f0:	fd cf       	rjmp	.-6      	; 0x9ec <st7565r_init+0xaa>
	ST7565R_USART_SPI.DATA = command;
     9f2:	86 ea       	ldi	r24, 0xA6	; 166
     9f4:	80 93 a0 09 	sts	0x09A0, r24
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     9f8:	e0 ea       	ldi	r30, 0xA0	; 160
     9fa:	f9 e0       	ldi	r31, 0x09	; 9
     9fc:	81 81       	ldd	r24, Z+1	; 0x01
     9fe:	86 ff       	sbrs	r24, 6
     a00:	fd cf       	rjmp	.-6      	; 0x9fc <st7565r_init+0xba>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     a02:	e0 ea       	ldi	r30, 0xA0	; 160
     a04:	f9 e0       	ldi	r31, 0x09	; 9
     a06:	81 81       	ldd	r24, Z+1	; 0x01
     a08:	80 64       	ori	r24, 0x40	; 64
     a0a:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     a0c:	80 81       	ld	r24, Z
     a0e:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     a12:	e0 ea       	ldi	r30, 0xA0	; 160
     a14:	f6 e0       	ldi	r31, 0x06	; 6
     a16:	88 e0       	ldi	r24, 0x08	; 8
     a18:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     a1a:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	e0 e6       	ldi	r30, 0x60	; 96
     a20:	f6 e0       	ldi	r31, 0x06	; 6
     a22:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     a24:	e0 ea       	ldi	r30, 0xA0	; 160
     a26:	f9 e0       	ldi	r31, 0x09	; 9
     a28:	81 81       	ldd	r24, Z+1	; 0x01
     a2a:	85 ff       	sbrs	r24, 5
     a2c:	fd cf       	rjmp	.-6      	; 0xa28 <st7565r_init+0xe6>
	ST7565R_USART_SPI.DATA = command;
     a2e:	88 ec       	ldi	r24, 0xC8	; 200
     a30:	80 93 a0 09 	sts	0x09A0, r24
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     a34:	e0 ea       	ldi	r30, 0xA0	; 160
     a36:	f9 e0       	ldi	r31, 0x09	; 9
     a38:	81 81       	ldd	r24, Z+1	; 0x01
     a3a:	86 ff       	sbrs	r24, 6
     a3c:	fd cf       	rjmp	.-6      	; 0xa38 <st7565r_init+0xf6>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     a3e:	e0 ea       	ldi	r30, 0xA0	; 160
     a40:	f9 e0       	ldi	r31, 0x09	; 9
     a42:	81 81       	ldd	r24, Z+1	; 0x01
     a44:	80 64       	ori	r24, 0x40	; 64
     a46:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     a48:	80 81       	ld	r24, Z
     a4a:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     a4e:	e0 ea       	ldi	r30, 0xA0	; 160
     a50:	f6 e0       	ldi	r31, 0x06	; 6
     a52:	88 e0       	ldi	r24, 0x08	; 8
     a54:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     a56:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	e0 e6       	ldi	r30, 0x60	; 96
     a5c:	f6 e0       	ldi	r31, 0x06	; 6
     a5e:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     a60:	e0 ea       	ldi	r30, 0xA0	; 160
     a62:	f9 e0       	ldi	r31, 0x09	; 9
     a64:	81 81       	ldd	r24, Z+1	; 0x01
     a66:	85 ff       	sbrs	r24, 5
     a68:	fd cf       	rjmp	.-6      	; 0xa64 <st7565r_init+0x122>
	ST7565R_USART_SPI.DATA = command;
     a6a:	82 ea       	ldi	r24, 0xA2	; 162
     a6c:	80 93 a0 09 	sts	0x09A0, r24
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     a70:	e0 ea       	ldi	r30, 0xA0	; 160
     a72:	f9 e0       	ldi	r31, 0x09	; 9
     a74:	81 81       	ldd	r24, Z+1	; 0x01
     a76:	86 ff       	sbrs	r24, 6
     a78:	fd cf       	rjmp	.-6      	; 0xa74 <st7565r_init+0x132>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     a7a:	e0 ea       	ldi	r30, 0xA0	; 160
     a7c:	f9 e0       	ldi	r31, 0x09	; 9
     a7e:	81 81       	ldd	r24, Z+1	; 0x01
     a80:	80 64       	ori	r24, 0x40	; 64
     a82:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     a84:	80 81       	ld	r24, Z
     a86:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     a8a:	e0 ea       	ldi	r30, 0xA0	; 160
     a8c:	f6 e0       	ldi	r31, 0x06	; 6
     a8e:	88 e0       	ldi	r24, 0x08	; 8
     a90:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     a92:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	e0 e6       	ldi	r30, 0x60	; 96
     a98:	f6 e0       	ldi	r31, 0x06	; 6
     a9a:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     a9c:	e0 ea       	ldi	r30, 0xA0	; 160
     a9e:	f9 e0       	ldi	r31, 0x09	; 9
     aa0:	81 81       	ldd	r24, Z+1	; 0x01
     aa2:	85 ff       	sbrs	r24, 5
     aa4:	fd cf       	rjmp	.-6      	; 0xaa0 <st7565r_init+0x15e>
	ST7565R_USART_SPI.DATA = command;
     aa6:	8f e2       	ldi	r24, 0x2F	; 47
     aa8:	80 93 a0 09 	sts	0x09A0, r24
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     aac:	e0 ea       	ldi	r30, 0xA0	; 160
     aae:	f9 e0       	ldi	r31, 0x09	; 9
     ab0:	81 81       	ldd	r24, Z+1	; 0x01
     ab2:	86 ff       	sbrs	r24, 6
     ab4:	fd cf       	rjmp	.-6      	; 0xab0 <st7565r_init+0x16e>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     ab6:	e0 ea       	ldi	r30, 0xA0	; 160
     ab8:	f9 e0       	ldi	r31, 0x09	; 9
     aba:	81 81       	ldd	r24, Z+1	; 0x01
     abc:	80 64       	ori	r24, 0x40	; 64
     abe:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     ac0:	80 81       	ld	r24, Z
     ac2:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     ac6:	e0 ea       	ldi	r30, 0xA0	; 160
     ac8:	f6 e0       	ldi	r31, 0x06	; 6
     aca:	88 e0       	ldi	r24, 0x08	; 8
     acc:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     ace:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	e0 e6       	ldi	r30, 0x60	; 96
     ad4:	f6 e0       	ldi	r31, 0x06	; 6
     ad6:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     ad8:	e0 ea       	ldi	r30, 0xA0	; 160
     ada:	f9 e0       	ldi	r31, 0x09	; 9
     adc:	81 81       	ldd	r24, Z+1	; 0x01
     ade:	85 ff       	sbrs	r24, 5
     ae0:	fd cf       	rjmp	.-6      	; 0xadc <st7565r_init+0x19a>
	ST7565R_USART_SPI.DATA = command;
     ae2:	88 ef       	ldi	r24, 0xF8	; 248
     ae4:	80 93 a0 09 	sts	0x09A0, r24
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     ae8:	e0 ea       	ldi	r30, 0xA0	; 160
     aea:	f9 e0       	ldi	r31, 0x09	; 9
     aec:	81 81       	ldd	r24, Z+1	; 0x01
     aee:	86 ff       	sbrs	r24, 6
     af0:	fd cf       	rjmp	.-6      	; 0xaec <st7565r_init+0x1aa>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     af2:	e0 ea       	ldi	r30, 0xA0	; 160
     af4:	f9 e0       	ldi	r31, 0x09	; 9
     af6:	81 81       	ldd	r24, Z+1	; 0x01
     af8:	80 64       	ori	r24, 0x40	; 64
     afa:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     afc:	80 81       	ld	r24, Z
     afe:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     b02:	e0 ea       	ldi	r30, 0xA0	; 160
     b04:	f6 e0       	ldi	r31, 0x06	; 6
     b06:	88 e0       	ldi	r24, 0x08	; 8
     b08:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     b0a:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	e0 e6       	ldi	r30, 0x60	; 96
     b10:	f6 e0       	ldi	r31, 0x06	; 6
     b12:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     b14:	e0 ea       	ldi	r30, 0xA0	; 160
     b16:	f9 e0       	ldi	r31, 0x09	; 9
     b18:	81 81       	ldd	r24, Z+1	; 0x01
     b1a:	85 ff       	sbrs	r24, 5
     b1c:	fd cf       	rjmp	.-6      	; 0xb18 <st7565r_init+0x1d6>
	ST7565R_USART_SPI.DATA = command;
     b1e:	10 92 a0 09 	sts	0x09A0, r1
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     b22:	e0 ea       	ldi	r30, 0xA0	; 160
     b24:	f9 e0       	ldi	r31, 0x09	; 9
     b26:	81 81       	ldd	r24, Z+1	; 0x01
     b28:	86 ff       	sbrs	r24, 6
     b2a:	fd cf       	rjmp	.-6      	; 0xb26 <st7565r_init+0x1e4>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     b2c:	e0 ea       	ldi	r30, 0xA0	; 160
     b2e:	f9 e0       	ldi	r31, 0x09	; 9
     b30:	81 81       	ldd	r24, Z+1	; 0x01
     b32:	80 64       	ori	r24, 0x40	; 64
     b34:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     b36:	80 81       	ld	r24, Z
     b38:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     b3c:	e0 ea       	ldi	r30, 0xA0	; 160
     b3e:	f6 e0       	ldi	r31, 0x06	; 6
     b40:	88 e0       	ldi	r24, 0x08	; 8
     b42:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     b44:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	e0 e6       	ldi	r30, 0x60	; 96
     b4a:	f6 e0       	ldi	r31, 0x06	; 6
     b4c:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     b4e:	e0 ea       	ldi	r30, 0xA0	; 160
     b50:	f9 e0       	ldi	r31, 0x09	; 9
     b52:	81 81       	ldd	r24, Z+1	; 0x01
     b54:	85 ff       	sbrs	r24, 5
     b56:	fd cf       	rjmp	.-6      	; 0xb52 <st7565r_init+0x210>
	ST7565R_USART_SPI.DATA = command;
     b58:	81 e2       	ldi	r24, 0x21	; 33
     b5a:	80 93 a0 09 	sts	0x09A0, r24
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     b5e:	e0 ea       	ldi	r30, 0xA0	; 160
     b60:	f9 e0       	ldi	r31, 0x09	; 9
     b62:	81 81       	ldd	r24, Z+1	; 0x01
     b64:	86 ff       	sbrs	r24, 6
     b66:	fd cf       	rjmp	.-6      	; 0xb62 <st7565r_init+0x220>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     b68:	e0 ea       	ldi	r30, 0xA0	; 160
     b6a:	f9 e0       	ldi	r31, 0x09	; 9
     b6c:	81 81       	ldd	r24, Z+1	; 0x01
     b6e:	80 64       	ori	r24, 0x40	; 64
     b70:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     b72:	80 81       	ld	r24, Z
     b74:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     b78:	e0 ea       	ldi	r30, 0xA0	; 160
     b7a:	f6 e0       	ldi	r31, 0x06	; 6
     b7c:	88 e0       	ldi	r24, 0x08	; 8
     b7e:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     b80:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	e0 e6       	ldi	r30, 0x60	; 96
     b86:	f6 e0       	ldi	r31, 0x06	; 6
     b88:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     b8a:	e0 ea       	ldi	r30, 0xA0	; 160
     b8c:	f9 e0       	ldi	r31, 0x09	; 9
     b8e:	81 81       	ldd	r24, Z+1	; 0x01
     b90:	85 ff       	sbrs	r24, 5
     b92:	fd cf       	rjmp	.-6      	; 0xb8e <st7565r_init+0x24c>
	ST7565R_USART_SPI.DATA = command;
     b94:	81 e8       	ldi	r24, 0x81	; 129
     b96:	80 93 a0 09 	sts	0x09A0, r24
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     b9a:	e0 ea       	ldi	r30, 0xA0	; 160
     b9c:	f9 e0       	ldi	r31, 0x09	; 9
     b9e:	81 81       	ldd	r24, Z+1	; 0x01
     ba0:	86 ff       	sbrs	r24, 6
     ba2:	fd cf       	rjmp	.-6      	; 0xb9e <st7565r_init+0x25c>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     ba4:	e0 ea       	ldi	r30, 0xA0	; 160
     ba6:	f9 e0       	ldi	r31, 0x09	; 9
     ba8:	81 81       	ldd	r24, Z+1	; 0x01
     baa:	80 64       	ori	r24, 0x40	; 64
     bac:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     bae:	80 81       	ld	r24, Z
     bb0:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     bb4:	e0 ea       	ldi	r30, 0xA0	; 160
     bb6:	f6 e0       	ldi	r31, 0x06	; 6
     bb8:	88 e0       	ldi	r24, 0x08	; 8
     bba:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     bbc:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	e0 e6       	ldi	r30, 0x60	; 96
     bc2:	f6 e0       	ldi	r31, 0x06	; 6
     bc4:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     bc6:	e0 ea       	ldi	r30, 0xA0	; 160
     bc8:	f9 e0       	ldi	r31, 0x09	; 9
     bca:	81 81       	ldd	r24, Z+1	; 0x01
     bcc:	85 ff       	sbrs	r24, 5
     bce:	fd cf       	rjmp	.-6      	; 0xbca <st7565r_init+0x288>
	ST7565R_USART_SPI.DATA = command;
     bd0:	81 e2       	ldi	r24, 0x21	; 33
     bd2:	80 93 a0 09 	sts	0x09A0, r24
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     bd6:	e0 ea       	ldi	r30, 0xA0	; 160
     bd8:	f9 e0       	ldi	r31, 0x09	; 9
     bda:	81 81       	ldd	r24, Z+1	; 0x01
     bdc:	86 ff       	sbrs	r24, 6
     bde:	fd cf       	rjmp	.-6      	; 0xbda <st7565r_init+0x298>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     be0:	e0 ea       	ldi	r30, 0xA0	; 160
     be2:	f9 e0       	ldi	r31, 0x09	; 9
     be4:	81 81       	ldd	r24, Z+1	; 0x01
     be6:	80 64       	ori	r24, 0x40	; 64
     be8:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     bea:	80 81       	ld	r24, Z
     bec:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     bf0:	e0 ea       	ldi	r30, 0xA0	; 160
     bf2:	f6 e0       	ldi	r31, 0x06	; 6
     bf4:	88 e0       	ldi	r24, 0x08	; 8
     bf6:	85 83       	std	Z+5, r24	; 0x05
 *
 * \param command the command to write
 */
static inline void st7565r_write_command(uint8_t command)
{
	ST7565R_CS_PORT.OUTCLR = ST7565R_CS_PIN;
     bf8:	86 83       	std	Z+6, r24	; 0x06
	ST7565R_A0_PORT.OUTCLR = ST7565R_A0_PIN;
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	e0 e6       	ldi	r30, 0x60	; 96
     bfe:	f6 e0       	ldi	r31, 0x06	; 6
     c00:	86 83       	std	Z+6, r24	; 0x06
	while(!(ST7565R_USART_SPI.STATUS & USART_DREIF_bm));
     c02:	e0 ea       	ldi	r30, 0xA0	; 160
     c04:	f9 e0       	ldi	r31, 0x09	; 9
     c06:	81 81       	ldd	r24, Z+1	; 0x01
     c08:	85 ff       	sbrs	r24, 5
     c0a:	fd cf       	rjmp	.-6      	; 0xc06 <st7565r_init+0x2c4>
	ST7565R_USART_SPI.DATA = command;
     c0c:	8f ea       	ldi	r24, 0xAF	; 175
     c0e:	80 93 a0 09 	sts	0x09A0, r24
	while(!(ST7565R_USART_SPI.STATUS & USART_TXCIF_bm));
     c12:	e0 ea       	ldi	r30, 0xA0	; 160
     c14:	f9 e0       	ldi	r31, 0x09	; 9
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	86 ff       	sbrs	r24, 6
     c1a:	fd cf       	rjmp	.-6      	; 0xc16 <st7565r_init+0x2d4>
	ST7565R_USART_SPI.STATUS |= USART_TXCIF_bm;
     c1c:	e0 ea       	ldi	r30, 0xA0	; 160
     c1e:	f9 e0       	ldi	r31, 0x09	; 9
     c20:	81 81       	ldd	r24, Z+1	; 0x01
     c22:	80 64       	ori	r24, 0x40	; 64
     c24:	81 83       	std	Z+1, r24	; 0x01
	temp = ST7565R_USART_SPI.DATA;
     c26:	80 81       	ld	r24, Z
     c28:	80 93 af 23 	sts	0x23AF, r24
	ST7565R_CS_PORT.OUTSET = ST7565R_CS_PIN;
     c2c:	88 e0       	ldi	r24, 0x08	; 8
     c2e:	e0 ea       	ldi	r30, 0xA0	; 160
     c30:	f6 e0       	ldi	r31, 0x06	; 6
     c32:	85 83       	std	Z+5, r24	; 0x05
	is set to the defined min*/
	st7565r_set_contrast(ST7565R_DISPLAY_CONTRAST_MIN);

	// Turn on the display
	st7565r_display_on();
}
     c34:	df 91       	pop	r29
     c36:	cf 91       	pop	r28
     c38:	08 95       	ret

00000c3a <Set_Clk_32MHz>:
24 ***************************************************************/

void Set_Clk_32MHz(void)
{
	
	OSC_CTRL |= OSC_RC32MEN_bm; //Setup 32Mhz crystal
     c3a:	e0 e5       	ldi	r30, 0x50	; 80
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	82 60       	ori	r24, 0x02	; 2
     c42:	80 83       	st	Z, r24
	
	while(!(OSC_STATUS & OSC_RC32MRDY_bm));
     c44:	e1 e5       	ldi	r30, 0x51	; 81
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	81 ff       	sbrs	r24, 1
     c4c:	fd cf       	rjmp	.-6      	; 0xc48 <Set_Clk_32MHz+0xe>
	CCP = CCP_IOREG_gc; //Trigger protection mechanism
     c4e:	88 ed       	ldi	r24, 0xD8	; 216
     c50:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc; //Enable internal 32Mhz crystal
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 40 00 	sts	0x0040, r24
     c58:	08 95       	ret

00000c5a <uart_init>:
/*****************************************************************************
39 Code for Initialize USART
40 *****************************************************************************/
void uart_init(void)
{
	PORTC_OUTSET = PIN3_bm; //Let's make PC7 as TX
     c5a:	88 e0       	ldi	r24, 0x08	; 8
     c5c:	80 93 45 06 	sts	0x0645, r24
	PORTC_DIRSET = PIN3_bm; //TX pin as output
     c60:	80 93 41 06 	sts	0x0641, r24
	
	USARTC0_BAUDCTRLA = 207;
     c64:	9f ec       	ldi	r25, 0xCF	; 207
     c66:	90 93 a6 08 	sts	0x08A6, r25
	USARTC0_BAUDCTRLB = 0;
     c6a:	10 92 a7 08 	sts	0x08A7, r1
	USARTC0_CTRLA = 0;
     c6e:	10 92 a3 08 	sts	0x08A3, r1
	USARTC0_CTRLC = 0x03;
     c72:	93 e0       	ldi	r25, 0x03	; 3
     c74:	90 93 a5 08 	sts	0x08A5, r25
	USARTC0_CTRLB = USART_TXEN_bm;
     c78:	80 93 a4 08 	sts	0x08A4, r24
     c7c:	08 95       	ret

00000c7e <send_char>:

/***************************************************************************
54 code for Sending a single char
55 *************************************************************************/
void send_char(char data)
{ USARTC0_DATA = data;
     c7e:	80 93 a0 08 	sts	0x08A0, r24
	while ( !( USARTC0_STATUS & USART_DREIF_bm) );
     c82:	e1 ea       	ldi	r30, 0xA1	; 161
     c84:	f8 e0       	ldi	r31, 0x08	; 8
     c86:	80 81       	ld	r24, Z
     c88:	85 ff       	sbrs	r24, 5
     c8a:	fd cf       	rjmp	.-6      	; 0xc86 <send_char+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c8c:	2f ef       	ldi	r18, 0xFF	; 255
     c8e:	81 ee       	ldi	r24, 0xE1	; 225
     c90:	94 e0       	ldi	r25, 0x04	; 4
     c92:	21 50       	subi	r18, 0x01	; 1
     c94:	80 40       	sbci	r24, 0x00	; 0
     c96:	90 40       	sbci	r25, 0x00	; 0
     c98:	e1 f7       	brne	.-8      	; 0xc92 <send_char+0x14>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <send_char+0x1e>
     c9c:	00 00       	nop
     c9e:	08 95       	ret

00000ca0 <int_to_char>:
unsigned char pwd[3];
unsigned char rx=0;
unsigned char u0=0, u1=0,u2=0,u3=0;
void int_to_char(unsigned char int_val);
void int_to_char(unsigned char int_val)
{
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	d8 2f       	mov	r29, r24
	unsigned char u,tn,h;
	u = int_val%10;
	int_val = int_val/10;
     ca8:	1d ec       	ldi	r17, 0xCD	; 205
     caa:	81 9f       	mul	r24, r17
     cac:	c1 2d       	mov	r28, r1
     cae:	11 24       	eor	r1, r1
     cb0:	c6 95       	lsr	r28
     cb2:	c6 95       	lsr	r28
     cb4:	c6 95       	lsr	r28
	tn = int_val%10;
	int_val = int_val/10;
     cb6:	c1 9f       	mul	r28, r17
     cb8:	11 2d       	mov	r17, r1
     cba:	11 24       	eor	r1, r1
     cbc:	16 95       	lsr	r17
     cbe:	16 95       	lsr	r17
     cc0:	16 95       	lsr	r17
	h = int_val;
	send_char(h|0x30);
     cc2:	81 2f       	mov	r24, r17
     cc4:	80 63       	ori	r24, 0x30	; 48
     cc6:	db df       	rcall	.-74     	; 0xc7e <send_char>
void int_to_char(unsigned char int_val)
{
	unsigned char u,tn,h;
	u = int_val%10;
	int_val = int_val/10;
	tn = int_val%10;
     cc8:	11 0f       	add	r17, r17
     cca:	81 2f       	mov	r24, r17
     ccc:	88 0f       	add	r24, r24
     cce:	88 0f       	add	r24, r24
     cd0:	18 0f       	add	r17, r24
     cd2:	8c 2f       	mov	r24, r28
     cd4:	81 1b       	sub	r24, r17
	int_val = int_val/10;
	h = int_val;
	send_char(h|0x30);
  
	send_char(tn|0x30);
     cd6:	80 63       	ori	r24, 0x30	; 48
     cd8:	d2 df       	rcall	.-92     	; 0xc7e <send_char>
unsigned char u0=0, u1=0,u2=0,u3=0;
void int_to_char(unsigned char int_val);
void int_to_char(unsigned char int_val)
{
	unsigned char u,tn,h;
	u = int_val%10;
     cda:	cc 0f       	add	r28, r28
     cdc:	8c 2f       	mov	r24, r28
     cde:	88 0f       	add	r24, r24
     ce0:	88 0f       	add	r24, r24
     ce2:	c8 0f       	add	r28, r24
     ce4:	8d 2f       	mov	r24, r29
     ce6:	8c 1b       	sub	r24, r28
	int_val = int_val/10;
	h = int_val;
	send_char(h|0x30);
  
	send_char(tn|0x30);
	 send_char(u|0x30);
     ce8:	80 63       	ori	r24, 0x30	; 48
     cea:	c9 df       	rcall	.-110    	; 0xc7e <send_char>
	send_char('\r');
     cec:	8d e0       	ldi	r24, 0x0D	; 13
     cee:	c7 df       	rcall	.-114    	; 0xc7e <send_char>
	send_char('\n');
     cf0:	8a e0       	ldi	r24, 0x0A	; 10
     cf2:	c5 df       	rcall	.-118    	; 0xc7e <send_char>

	}
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	1f 91       	pop	r17
     cfa:	08 95       	ret

00000cfc <send_string>:
}
/**************************************************
62 code for sending a string
63 **************************************************/
void send_string(char *str)
{ while(1)
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ec 01       	movw	r28, r24
	{
		
		if( *str == '\0' ) break;
     d02:	88 81       	ld	r24, Y
     d04:	88 23       	and	r24, r24
     d06:	29 f0       	breq	.+10     	; 0xd12 <send_string+0x16>
     d08:	21 96       	adiw	r28, 0x01	; 1
		send_char(*str++);
     d0a:	b9 df       	rcall	.-142    	; 0xc7e <send_char>
63 **************************************************/
void send_string(char *str)
{ while(1)
	{
		
		if( *str == '\0' ) break;
     d0c:	89 91       	ld	r24, Y+
     d0e:	81 11       	cpse	r24, r1
     d10:	fc cf       	rjmp	.-8      	; 0xd0a <send_string+0xe>
		send_char(*str++);
	}
}
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	08 95       	ret

00000d18 <scan_keypad>:
	
}

void scan_keypad(void)
{
	PORTE_OUT = 0x02;
     d18:	e4 e8       	ldi	r30, 0x84	; 132
     d1a:	f6 e0       	ldi	r31, 0x06	; 6
     d1c:	82 e0       	ldi	r24, 0x02	; 2
     d1e:	80 83       	st	Z, r24
	PORTD_DIR =0x00; // PORTD as input port
     d20:	10 92 60 06 	sts	0x0660, r1
	// Scan A[1x2]
	if ((PORTE_OUT == 0x02) && (PORTD_IN ==0x31)) // if 0th pin of PORTD is receiving logic high
     d24:	80 81       	ld	r24, Z
     d26:	82 30       	cpi	r24, 0x02	; 2
     d28:	39 f5       	brne	.+78     	; 0xd78 <scan_keypad+0x60>
     d2a:	80 91 68 06 	lds	r24, 0x0668
     d2e:	81 33       	cpi	r24, 0x31	; 49
     d30:	19 f5       	brne	.+70     	; 0xd78 <scan_keypad+0x60>
	{
		gfx_mono_init();
     d32:	5c dc       	rcall	.-1864   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
     d34:	80 e1       	ldi	r24, 0x10	; 16
     d36:	e0 e8       	ldi	r30, 0x80	; 128
     d38:	f6 e0       	ldi	r31, 0x06	; 6
     d3a:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("2\r\n", 0, 0, &sysfont);
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e2       	ldi	r19, 0x20	; 32
     d40:	40 e0       	ldi	r20, 0x00	; 0
     d42:	60 e0       	ldi	r22, 0x00	; 0
     d44:	87 e0       	ldi	r24, 0x07	; 7
     d46:	90 e2       	ldi	r25, 0x20	; 32
     d48:	d3 dd       	rcall	.-1114   	; 0x8f0 <gfx_mono_draw_string>
		send_string("2\r\n");
     d4a:	87 e0       	ldi	r24, 0x07	; 7
     d4c:	90 e2       	ldi	r25, 0x20	; 32
     d4e:	d6 df       	rcall	.-84     	; 0xcfc <send_string>
		pwd[rx]='2';
     d50:	80 91 ae 23 	lds	r24, 0x23AE
     d54:	e8 2f       	mov	r30, r24
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	e0 55       	subi	r30, 0x50	; 80
     d5a:	fc 4d       	sbci	r31, 0xDC	; 220
     d5c:	92 e3       	ldi	r25, 0x32	; 50
     d5e:	90 83       	st	Z, r25
		rx++;
     d60:	8f 5f       	subi	r24, 0xFF	; 255
     d62:	80 93 ae 23 	sts	0x23AE, r24
     d66:	2f ef       	ldi	r18, 0xFF	; 255
     d68:	87 ea       	ldi	r24, 0xA7	; 167
     d6a:	91 e6       	ldi	r25, 0x61	; 97
     d6c:	21 50       	subi	r18, 0x01	; 1
     d6e:	80 40       	sbci	r24, 0x00	; 0
     d70:	90 40       	sbci	r25, 0x00	; 0
     d72:	e1 f7       	brne	.-8      	; 0xd6c <scan_keypad+0x54>
     d74:	00 c0       	rjmp	.+0      	; 0xd76 <scan_keypad+0x5e>
     d76:	00 00       	nop
		
		_delay_ms(1000);
	}
	// Scan A[2x2]
	if((PORTE_OUT == 0x02) && (PORTD_IN == 0x38))
     d78:	80 91 84 06 	lds	r24, 0x0684
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	39 f5       	brne	.+78     	; 0xdce <scan_keypad+0xb6>
     d80:	80 91 68 06 	lds	r24, 0x0668
     d84:	88 33       	cpi	r24, 0x38	; 56
     d86:	19 f5       	brne	.+70     	; 0xdce <scan_keypad+0xb6>
	{
		gfx_mono_init();
     d88:	31 dc       	rcall	.-1950   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
     d8a:	80 e1       	ldi	r24, 0x10	; 16
     d8c:	e0 e8       	ldi	r30, 0x80	; 128
     d8e:	f6 e0       	ldi	r31, 0x06	; 6
     d90:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("5\r\n", 0, 0, &sysfont);
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e2       	ldi	r19, 0x20	; 32
     d96:	40 e0       	ldi	r20, 0x00	; 0
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	8b e0       	ldi	r24, 0x0B	; 11
     d9c:	90 e2       	ldi	r25, 0x20	; 32
     d9e:	a8 dd       	rcall	.-1200   	; 0x8f0 <gfx_mono_draw_string>
		send_string("5\r\n");
     da0:	8b e0       	ldi	r24, 0x0B	; 11
     da2:	90 e2       	ldi	r25, 0x20	; 32
     da4:	ab df       	rcall	.-170    	; 0xcfc <send_string>
		pwd[rx]='5';
     da6:	80 91 ae 23 	lds	r24, 0x23AE
     daa:	e8 2f       	mov	r30, r24
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	e0 55       	subi	r30, 0x50	; 80
     db0:	fc 4d       	sbci	r31, 0xDC	; 220
     db2:	95 e3       	ldi	r25, 0x35	; 53
     db4:	90 83       	st	Z, r25
		rx++;
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	80 93 ae 23 	sts	0x23AE, r24
     dbc:	2f ef       	ldi	r18, 0xFF	; 255
     dbe:	87 ea       	ldi	r24, 0xA7	; 167
     dc0:	91 e6       	ldi	r25, 0x61	; 97
     dc2:	21 50       	subi	r18, 0x01	; 1
     dc4:	80 40       	sbci	r24, 0x00	; 0
     dc6:	90 40       	sbci	r25, 0x00	; 0
     dc8:	e1 f7       	brne	.-8      	; 0xdc2 <scan_keypad+0xaa>
     dca:	00 c0       	rjmp	.+0      	; 0xdcc <scan_keypad+0xb4>
     dcc:	00 00       	nop
		_delay_ms(1000);
	}
	// Scan A[3x2]
	if((PORTE_OUT == 0x02) && (PORTD_IN == 0x34))
     dce:	80 91 84 06 	lds	r24, 0x0684
     dd2:	82 30       	cpi	r24, 0x02	; 2
     dd4:	39 f5       	brne	.+78     	; 0xe24 <scan_keypad+0x10c>
     dd6:	80 91 68 06 	lds	r24, 0x0668
     dda:	84 33       	cpi	r24, 0x34	; 52
     ddc:	19 f5       	brne	.+70     	; 0xe24 <scan_keypad+0x10c>
	{
		pwd[rx]='8';
     dde:	80 91 ae 23 	lds	r24, 0x23AE
     de2:	e8 2f       	mov	r30, r24
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	e0 55       	subi	r30, 0x50	; 80
     de8:	fc 4d       	sbci	r31, 0xDC	; 220
     dea:	98 e3       	ldi	r25, 0x38	; 56
     dec:	90 83       	st	Z, r25
		rx++;
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	80 93 ae 23 	sts	0x23AE, r24
		gfx_mono_init();
     df4:	fb db       	rcall	.-2058   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
     df6:	80 e1       	ldi	r24, 0x10	; 16
     df8:	e0 e8       	ldi	r30, 0x80	; 128
     dfa:	f6 e0       	ldi	r31, 0x06	; 6
     dfc:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("8\r\n", 0, 0, &sysfont);
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e2       	ldi	r19, 0x20	; 32
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	8f e0       	ldi	r24, 0x0F	; 15
     e08:	90 e2       	ldi	r25, 0x20	; 32
     e0a:	72 dd       	rcall	.-1308   	; 0x8f0 <gfx_mono_draw_string>
		send_string("8\r\n");
     e0c:	8f e0       	ldi	r24, 0x0F	; 15
     e0e:	90 e2       	ldi	r25, 0x20	; 32
     e10:	75 df       	rcall	.-278    	; 0xcfc <send_string>
     e12:	2f ef       	ldi	r18, 0xFF	; 255
     e14:	87 ea       	ldi	r24, 0xA7	; 167
     e16:	91 e6       	ldi	r25, 0x61	; 97
     e18:	21 50       	subi	r18, 0x01	; 1
     e1a:	80 40       	sbci	r24, 0x00	; 0
     e1c:	90 40       	sbci	r25, 0x00	; 0
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <scan_keypad+0x100>
     e20:	00 c0       	rjmp	.+0      	; 0xe22 <scan_keypad+0x10a>
     e22:	00 00       	nop
		_delay_ms(1000);
		//G:\RAHUL IMP_DATA\M.Tech_Project\My xmega usart running code\KAYPAD\KEYPAD\KEYPAD\KEYPAD.c 3
	}
	// Scan A[4x2]
	if((PORTE_OUT == 0x02) && (PORTD_IN == 0x32))
     e24:	80 91 84 06 	lds	r24, 0x0684
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	39 f5       	brne	.+78     	; 0xe7a <scan_keypad+0x162>
     e2c:	80 91 68 06 	lds	r24, 0x0668
     e30:	82 33       	cpi	r24, 0x32	; 50
     e32:	19 f5       	brne	.+70     	; 0xe7a <scan_keypad+0x162>
	{
		gfx_mono_init();
     e34:	db db       	rcall	.-2122   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
     e36:	80 e1       	ldi	r24, 0x10	; 16
     e38:	e0 e8       	ldi	r30, 0x80	; 128
     e3a:	f6 e0       	ldi	r31, 0x06	; 6
     e3c:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("0\r\n", 0, 0, &sysfont);
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e2       	ldi	r19, 0x20	; 32
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	60 e0       	ldi	r22, 0x00	; 0
     e46:	83 e1       	ldi	r24, 0x13	; 19
     e48:	90 e2       	ldi	r25, 0x20	; 32
     e4a:	52 dd       	rcall	.-1372   	; 0x8f0 <gfx_mono_draw_string>
		send_string("0\r\n");
     e4c:	83 e1       	ldi	r24, 0x13	; 19
     e4e:	90 e2       	ldi	r25, 0x20	; 32
     e50:	55 df       	rcall	.-342    	; 0xcfc <send_string>
		pwd[rx]='0';
     e52:	80 91 ae 23 	lds	r24, 0x23AE
     e56:	e8 2f       	mov	r30, r24
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	e0 55       	subi	r30, 0x50	; 80
     e5c:	fc 4d       	sbci	r31, 0xDC	; 220
     e5e:	90 e3       	ldi	r25, 0x30	; 48
     e60:	90 83       	st	Z, r25
		rx++;
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	80 93 ae 23 	sts	0x23AE, r24
     e68:	2f ef       	ldi	r18, 0xFF	; 255
     e6a:	87 ea       	ldi	r24, 0xA7	; 167
     e6c:	91 e6       	ldi	r25, 0x61	; 97
     e6e:	21 50       	subi	r18, 0x01	; 1
     e70:	80 40       	sbci	r24, 0x00	; 0
     e72:	90 40       	sbci	r25, 0x00	; 0
     e74:	e1 f7       	brne	.-8      	; 0xe6e <scan_keypad+0x156>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <scan_keypad+0x160>
     e78:	00 00       	nop
		_delay_ms(1000);
	}
	
	PORTE_OUT = 0x01;
     e7a:	e4 e8       	ldi	r30, 0x84	; 132
     e7c:	f6 e0       	ldi	r31, 0x06	; 6
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 83       	st	Z, r24
	PORTD_DIR =0x00; // PORTD as input port
     e82:	10 92 60 06 	sts	0x0660, r1
	// Scan A[1x1]
	if ((PORTE_OUT == 0x01) && (PORTD_IN == 0x31)) // if 0th pin of PORTD is receiving logic high
     e86:	80 81       	ld	r24, Z
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	39 f5       	brne	.+78     	; 0xeda <scan_keypad+0x1c2>
     e8c:	80 91 68 06 	lds	r24, 0x0668
     e90:	81 33       	cpi	r24, 0x31	; 49
     e92:	19 f5       	brne	.+70     	; 0xeda <scan_keypad+0x1c2>
	{
		gfx_mono_init();
     e94:	ab db       	rcall	.-2218   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
     e96:	80 e1       	ldi	r24, 0x10	; 16
     e98:	e0 e8       	ldi	r30, 0x80	; 128
     e9a:	f6 e0       	ldi	r31, 0x06	; 6
     e9c:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("1\r\n", 0, 0, &sysfont);
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e2       	ldi	r19, 0x20	; 32
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	60 e0       	ldi	r22, 0x00	; 0
     ea6:	87 e1       	ldi	r24, 0x17	; 23
     ea8:	90 e2       	ldi	r25, 0x20	; 32
     eaa:	22 dd       	rcall	.-1468   	; 0x8f0 <gfx_mono_draw_string>
		send_string("1\r\n");
     eac:	87 e1       	ldi	r24, 0x17	; 23
     eae:	90 e2       	ldi	r25, 0x20	; 32
     eb0:	25 df       	rcall	.-438    	; 0xcfc <send_string>
		pwd[rx]='1';
     eb2:	80 91 ae 23 	lds	r24, 0x23AE
     eb6:	e8 2f       	mov	r30, r24
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	e0 55       	subi	r30, 0x50	; 80
     ebc:	fc 4d       	sbci	r31, 0xDC	; 220
     ebe:	91 e3       	ldi	r25, 0x31	; 49
     ec0:	90 83       	st	Z, r25
		rx++;
     ec2:	8f 5f       	subi	r24, 0xFF	; 255
     ec4:	80 93 ae 23 	sts	0x23AE, r24
     ec8:	2f ef       	ldi	r18, 0xFF	; 255
     eca:	87 ea       	ldi	r24, 0xA7	; 167
     ecc:	91 e6       	ldi	r25, 0x61	; 97
     ece:	21 50       	subi	r18, 0x01	; 1
     ed0:	80 40       	sbci	r24, 0x00	; 0
     ed2:	90 40       	sbci	r25, 0x00	; 0
     ed4:	e1 f7       	brne	.-8      	; 0xece <scan_keypad+0x1b6>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <scan_keypad+0x1c0>
     ed8:	00 00       	nop
		_delay_ms(1000);
	}
	// Scan A[2x1]
	if((PORTE_OUT == 0x01) && (PORTD_IN == 0x38))
     eda:	80 91 84 06 	lds	r24, 0x0684
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	39 f5       	brne	.+78     	; 0xf30 <scan_keypad+0x218>
     ee2:	80 91 68 06 	lds	r24, 0x0668
     ee6:	88 33       	cpi	r24, 0x38	; 56
     ee8:	19 f5       	brne	.+70     	; 0xf30 <scan_keypad+0x218>
	{
		
		pwd[rx]='4';
     eea:	80 91 ae 23 	lds	r24, 0x23AE
     eee:	e8 2f       	mov	r30, r24
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	e0 55       	subi	r30, 0x50	; 80
     ef4:	fc 4d       	sbci	r31, 0xDC	; 220
     ef6:	94 e3       	ldi	r25, 0x34	; 52
     ef8:	90 83       	st	Z, r25
		rx++;
     efa:	8f 5f       	subi	r24, 0xFF	; 255
     efc:	80 93 ae 23 	sts	0x23AE, r24
		gfx_mono_init();
     f00:	75 db       	rcall	.-2326   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
     f02:	80 e1       	ldi	r24, 0x10	; 16
     f04:	e0 e8       	ldi	r30, 0x80	; 128
     f06:	f6 e0       	ldi	r31, 0x06	; 6
     f08:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("4\r\n", 0, 0, &sysfont);
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e2       	ldi	r19, 0x20	; 32
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	60 e0       	ldi	r22, 0x00	; 0
     f12:	8b e1       	ldi	r24, 0x1B	; 27
     f14:	90 e2       	ldi	r25, 0x20	; 32
     f16:	ec dc       	rcall	.-1576   	; 0x8f0 <gfx_mono_draw_string>
		send_string("4\r\n");
     f18:	8b e1       	ldi	r24, 0x1B	; 27
     f1a:	90 e2       	ldi	r25, 0x20	; 32
     f1c:	ef de       	rcall	.-546    	; 0xcfc <send_string>
     f1e:	2f ef       	ldi	r18, 0xFF	; 255
     f20:	87 ea       	ldi	r24, 0xA7	; 167
     f22:	91 e6       	ldi	r25, 0x61	; 97
     f24:	21 50       	subi	r18, 0x01	; 1
     f26:	80 40       	sbci	r24, 0x00	; 0
     f28:	90 40       	sbci	r25, 0x00	; 0
     f2a:	e1 f7       	brne	.-8      	; 0xf24 <scan_keypad+0x20c>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <scan_keypad+0x216>
     f2e:	00 00       	nop
		_delay_ms(1000);
	}
	// Scan A[3x1]
	if((PORTE_OUT == 0x01) && (PORTD_IN == 0x34))
     f30:	80 91 84 06 	lds	r24, 0x0684
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	39 f5       	brne	.+78     	; 0xf86 <scan_keypad+0x26e>
     f38:	80 91 68 06 	lds	r24, 0x0668
     f3c:	84 33       	cpi	r24, 0x34	; 52
     f3e:	19 f5       	brne	.+70     	; 0xf86 <scan_keypad+0x26e>
	{
		pwd[rx]='7';
     f40:	80 91 ae 23 	lds	r24, 0x23AE
     f44:	e8 2f       	mov	r30, r24
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	e0 55       	subi	r30, 0x50	; 80
     f4a:	fc 4d       	sbci	r31, 0xDC	; 220
     f4c:	97 e3       	ldi	r25, 0x37	; 55
     f4e:	90 83       	st	Z, r25
		rx++;
     f50:	8f 5f       	subi	r24, 0xFF	; 255
     f52:	80 93 ae 23 	sts	0x23AE, r24
		gfx_mono_init();
     f56:	4a db       	rcall	.-2412   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
     f58:	80 e1       	ldi	r24, 0x10	; 16
     f5a:	e0 e8       	ldi	r30, 0x80	; 128
     f5c:	f6 e0       	ldi	r31, 0x06	; 6
     f5e:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("7\r\n", 0, 0, &sysfont);
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e2       	ldi	r19, 0x20	; 32
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	8f e1       	ldi	r24, 0x1F	; 31
     f6a:	90 e2       	ldi	r25, 0x20	; 32
     f6c:	c1 dc       	rcall	.-1662   	; 0x8f0 <gfx_mono_draw_string>
		send_string("7\r\n");
     f6e:	8f e1       	ldi	r24, 0x1F	; 31
     f70:	90 e2       	ldi	r25, 0x20	; 32
     f72:	c4 de       	rcall	.-632    	; 0xcfc <send_string>
     f74:	2f ef       	ldi	r18, 0xFF	; 255
     f76:	87 ea       	ldi	r24, 0xA7	; 167
     f78:	91 e6       	ldi	r25, 0x61	; 97
     f7a:	21 50       	subi	r18, 0x01	; 1
     f7c:	80 40       	sbci	r24, 0x00	; 0
     f7e:	90 40       	sbci	r25, 0x00	; 0
     f80:	e1 f7       	brne	.-8      	; 0xf7a <scan_keypad+0x262>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <scan_keypad+0x26c>
     f84:	00 00       	nop
		_delay_ms(1000);
	}
	// Scan A[4x1]
	if((PORTE_OUT == 0x01) && (PORTD_IN == 0x32))
     f86:	80 91 84 06 	lds	r24, 0x0684
     f8a:	81 30       	cpi	r24, 0x01	; 1
     f8c:	39 f5       	brne	.+78     	; 0xfdc <scan_keypad+0x2c4>
     f8e:	80 91 68 06 	lds	r24, 0x0668
     f92:	82 33       	cpi	r24, 0x32	; 50
     f94:	19 f5       	brne	.+70     	; 0xfdc <scan_keypad+0x2c4>
	{
		pwd[rx]='*';
     f96:	80 91 ae 23 	lds	r24, 0x23AE
     f9a:	e8 2f       	mov	r30, r24
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	e0 55       	subi	r30, 0x50	; 80
     fa0:	fc 4d       	sbci	r31, 0xDC	; 220
     fa2:	9a e2       	ldi	r25, 0x2A	; 42
     fa4:	90 83       	st	Z, r25
		rx++;
     fa6:	8f 5f       	subi	r24, 0xFF	; 255
     fa8:	80 93 ae 23 	sts	0x23AE, r24
		gfx_mono_init();
     fac:	1f db       	rcall	.-2498   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
     fae:	80 e1       	ldi	r24, 0x10	; 16
     fb0:	e0 e8       	ldi	r30, 0x80	; 128
     fb2:	f6 e0       	ldi	r31, 0x06	; 6
     fb4:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("*\r\n", 0, 0, &sysfont);
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e2       	ldi	r19, 0x20	; 32
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	83 e2       	ldi	r24, 0x23	; 35
     fc0:	90 e2       	ldi	r25, 0x20	; 32
     fc2:	96 dc       	rcall	.-1748   	; 0x8f0 <gfx_mono_draw_string>
		send_string("*\r\n");
     fc4:	83 e2       	ldi	r24, 0x23	; 35
     fc6:	90 e2       	ldi	r25, 0x20	; 32
     fc8:	99 de       	rcall	.-718    	; 0xcfc <send_string>
     fca:	2f ef       	ldi	r18, 0xFF	; 255
     fcc:	87 ea       	ldi	r24, 0xA7	; 167
     fce:	91 e6       	ldi	r25, 0x61	; 97
     fd0:	21 50       	subi	r18, 0x01	; 1
     fd2:	80 40       	sbci	r24, 0x00	; 0
     fd4:	90 40       	sbci	r25, 0x00	; 0
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <scan_keypad+0x2b8>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <scan_keypad+0x2c2>
     fda:	00 00       	nop
		_delay_ms(1000);
	}
	
	PORTE_OUT = 0x04;
     fdc:	e4 e8       	ldi	r30, 0x84	; 132
     fde:	f6 e0       	ldi	r31, 0x06	; 6
     fe0:	84 e0       	ldi	r24, 0x04	; 4
     fe2:	80 83       	st	Z, r24
	PORTD_DIR =0x00; // PORTD as input port
     fe4:	10 92 60 06 	sts	0x0660, r1
	// Scan A[1x3]
	if ((PORTE_OUT == 0x04) &&(PORTD_IN ==0x31)) // if 0th pin of PORTD is receiving logic high
     fe8:	80 81       	ld	r24, Z
     fea:	84 30       	cpi	r24, 0x04	; 4
     fec:	39 f5       	brne	.+78     	; 0x103c <scan_keypad+0x324>
     fee:	80 91 68 06 	lds	r24, 0x0668
     ff2:	81 33       	cpi	r24, 0x31	; 49
     ff4:	19 f5       	brne	.+70     	; 0x103c <scan_keypad+0x324>
	{
		pwd[rx]='3';
     ff6:	80 91 ae 23 	lds	r24, 0x23AE
     ffa:	e8 2f       	mov	r30, r24
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	e0 55       	subi	r30, 0x50	; 80
    1000:	fc 4d       	sbci	r31, 0xDC	; 220
    1002:	93 e3       	ldi	r25, 0x33	; 51
    1004:	90 83       	st	Z, r25
		rx++;
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	80 93 ae 23 	sts	0x23AE, r24
		gfx_mono_init();
    100c:	ef da       	rcall	.-2594   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
    100e:	80 e1       	ldi	r24, 0x10	; 16
    1010:	e0 e8       	ldi	r30, 0x80	; 128
    1012:	f6 e0       	ldi	r31, 0x06	; 6
    1014:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("3\r\n", 0, 0, &sysfont);
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e2       	ldi	r19, 0x20	; 32
    101a:	40 e0       	ldi	r20, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	91 e2       	ldi	r25, 0x21	; 33
    1022:	66 dc       	rcall	.-1844   	; 0x8f0 <gfx_mono_draw_string>
		send_string("3\r\n");
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	91 e2       	ldi	r25, 0x21	; 33
    1028:	69 de       	rcall	.-814    	; 0xcfc <send_string>
    102a:	2f ef       	ldi	r18, 0xFF	; 255
    102c:	87 ea       	ldi	r24, 0xA7	; 167
    102e:	91 e6       	ldi	r25, 0x61	; 97
    1030:	21 50       	subi	r18, 0x01	; 1
    1032:	80 40       	sbci	r24, 0x00	; 0
    1034:	90 40       	sbci	r25, 0x00	; 0
    1036:	e1 f7       	brne	.-8      	; 0x1030 <scan_keypad+0x318>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <scan_keypad+0x322>
    103a:	00 00       	nop
		_delay_ms(1000);
	}
	// Scan A[2x3]
	if((PORTE_OUT == 0x04) && (PORTD_IN == 0x38))
    103c:	80 91 84 06 	lds	r24, 0x0684
    1040:	84 30       	cpi	r24, 0x04	; 4
    1042:	39 f5       	brne	.+78     	; 0x1092 <scan_keypad+0x37a>
    1044:	80 91 68 06 	lds	r24, 0x0668
    1048:	88 33       	cpi	r24, 0x38	; 56
    104a:	19 f5       	brne	.+70     	; 0x1092 <scan_keypad+0x37a>
	{
		pwd[rx]='6';
    104c:	80 91 ae 23 	lds	r24, 0x23AE
    1050:	e8 2f       	mov	r30, r24
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	e0 55       	subi	r30, 0x50	; 80
    1056:	fc 4d       	sbci	r31, 0xDC	; 220
    1058:	96 e3       	ldi	r25, 0x36	; 54
    105a:	90 83       	st	Z, r25
		rx++;
    105c:	8f 5f       	subi	r24, 0xFF	; 255
    105e:	80 93 ae 23 	sts	0x23AE, r24
		gfx_mono_init();
    1062:	c4 da       	rcall	.-2680   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
    1064:	80 e1       	ldi	r24, 0x10	; 16
    1066:	e0 e8       	ldi	r30, 0x80	; 128
    1068:	f6 e0       	ldi	r31, 0x06	; 6
    106a:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("6\r\n", 0, 0, &sysfont);
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e2       	ldi	r19, 0x20	; 32
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	87 e2       	ldi	r24, 0x27	; 39
    1076:	90 e2       	ldi	r25, 0x20	; 32
    1078:	3b dc       	rcall	.-1930   	; 0x8f0 <gfx_mono_draw_string>
		send_string("6\r\n");
    107a:	87 e2       	ldi	r24, 0x27	; 39
    107c:	90 e2       	ldi	r25, 0x20	; 32
    107e:	3e de       	rcall	.-900    	; 0xcfc <send_string>
    1080:	2f ef       	ldi	r18, 0xFF	; 255
    1082:	87 ea       	ldi	r24, 0xA7	; 167
    1084:	91 e6       	ldi	r25, 0x61	; 97
    1086:	21 50       	subi	r18, 0x01	; 1
    1088:	80 40       	sbci	r24, 0x00	; 0
    108a:	90 40       	sbci	r25, 0x00	; 0
    108c:	e1 f7       	brne	.-8      	; 0x1086 <scan_keypad+0x36e>
    108e:	00 c0       	rjmp	.+0      	; 0x1090 <scan_keypad+0x378>
    1090:	00 00       	nop
		_delay_ms(1000);
	}
	// Scan A[3x3]
	if((PORTE_OUT == 0x04) && (PORTD_IN == 0x34))
    1092:	80 91 84 06 	lds	r24, 0x0684
    1096:	84 30       	cpi	r24, 0x04	; 4
    1098:	39 f5       	brne	.+78     	; 0x10e8 <scan_keypad+0x3d0>
    109a:	80 91 68 06 	lds	r24, 0x0668
    109e:	84 33       	cpi	r24, 0x34	; 52
    10a0:	19 f5       	brne	.+70     	; 0x10e8 <scan_keypad+0x3d0>
	{
		pwd[rx]='9';
    10a2:	80 91 ae 23 	lds	r24, 0x23AE
    10a6:	e8 2f       	mov	r30, r24
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	e0 55       	subi	r30, 0x50	; 80
    10ac:	fc 4d       	sbci	r31, 0xDC	; 220
    10ae:	99 e3       	ldi	r25, 0x39	; 57
    10b0:	90 83       	st	Z, r25
		rx++;
    10b2:	8f 5f       	subi	r24, 0xFF	; 255
    10b4:	80 93 ae 23 	sts	0x23AE, r24
		gfx_mono_init();
    10b8:	99 da       	rcall	.-2766   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
    10ba:	80 e1       	ldi	r24, 0x10	; 16
    10bc:	e0 e8       	ldi	r30, 0x80	; 128
    10be:	f6 e0       	ldi	r31, 0x06	; 6
    10c0:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("9\r\n", 0, 0, &sysfont);
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e2       	ldi	r19, 0x20	; 32
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	60 e0       	ldi	r22, 0x00	; 0
    10ca:	8b e2       	ldi	r24, 0x2B	; 43
    10cc:	90 e2       	ldi	r25, 0x20	; 32
    10ce:	10 dc       	rcall	.-2016   	; 0x8f0 <gfx_mono_draw_string>
        send_string("9\r\n");
    10d0:	8b e2       	ldi	r24, 0x2B	; 43
    10d2:	90 e2       	ldi	r25, 0x20	; 32
    10d4:	13 de       	rcall	.-986    	; 0xcfc <send_string>
    10d6:	2f ef       	ldi	r18, 0xFF	; 255
    10d8:	87 ea       	ldi	r24, 0xA7	; 167
    10da:	91 e6       	ldi	r25, 0x61	; 97
    10dc:	21 50       	subi	r18, 0x01	; 1
    10de:	80 40       	sbci	r24, 0x00	; 0
    10e0:	90 40       	sbci	r25, 0x00	; 0
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <scan_keypad+0x3c4>
    10e4:	00 c0       	rjmp	.+0      	; 0x10e6 <scan_keypad+0x3ce>
    10e6:	00 00       	nop
		_delay_ms(1000);
	}
	//G:\RAHUL IMP_DATA\M.Tech_Project\My xmega usart running code\KAYPAD\KEYPAD\KEYPAD\KEYPAD.c 4
	// Scan A[4x3]
	if((PORTE_OUT == 0x04) && (PORTD_IN == 0x32))
    10e8:	80 91 84 06 	lds	r24, 0x0684
    10ec:	84 30       	cpi	r24, 0x04	; 4
    10ee:	39 f5       	brne	.+78     	; 0x113e <scan_keypad+0x426>
    10f0:	80 91 68 06 	lds	r24, 0x0668
    10f4:	82 33       	cpi	r24, 0x32	; 50
    10f6:	19 f5       	brne	.+70     	; 0x113e <scan_keypad+0x426>
	{
		gfx_mono_init();
    10f8:	79 da       	rcall	.-2830   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
    10fa:	80 e1       	ldi	r24, 0x10	; 16
    10fc:	e0 e8       	ldi	r30, 0x80	; 128
    10fe:	f6 e0       	ldi	r31, 0x06	; 6
    1100:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("#\r\n", 0, 0, &sysfont);
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e2       	ldi	r19, 0x20	; 32
    1106:	40 e0       	ldi	r20, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	8f e2       	ldi	r24, 0x2F	; 47
    110c:	90 e2       	ldi	r25, 0x20	; 32
    110e:	f0 db       	rcall	.-2080   	; 0x8f0 <gfx_mono_draw_string>
		send_string("#\r\n");
    1110:	8f e2       	ldi	r24, 0x2F	; 47
    1112:	90 e2       	ldi	r25, 0x20	; 32
    1114:	f3 dd       	rcall	.-1050   	; 0xcfc <send_string>
		pwd[rx]='#';
    1116:	80 91 ae 23 	lds	r24, 0x23AE
    111a:	e8 2f       	mov	r30, r24
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	e0 55       	subi	r30, 0x50	; 80
    1120:	fc 4d       	sbci	r31, 0xDC	; 220
    1122:	93 e2       	ldi	r25, 0x23	; 35
    1124:	90 83       	st	Z, r25
		rx++;
    1126:	8f 5f       	subi	r24, 0xFF	; 255
    1128:	80 93 ae 23 	sts	0x23AE, r24
    112c:	2f ef       	ldi	r18, 0xFF	; 255
    112e:	87 ea       	ldi	r24, 0xA7	; 167
    1130:	91 e6       	ldi	r25, 0x61	; 97
    1132:	21 50       	subi	r18, 0x01	; 1
    1134:	80 40       	sbci	r24, 0x00	; 0
    1136:	90 40       	sbci	r25, 0x00	; 0
    1138:	e1 f7       	brne	.-8      	; 0x1132 <scan_keypad+0x41a>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <scan_keypad+0x424>
    113c:	00 00       	nop
    113e:	08 95       	ret

00001140 <Password>:
}

//G:\RAHUL IMP_DATA\M.Tech_Project\My xmega usart running code\KAYPAD\KEYPAD\KEYPAD\KEYPAD.c 2

void Password(void)
{
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
	OSC.CTRL |= OSC_RC32MEN_bm;
    1146:	e0 e5       	ldi	r30, 0x50	; 80
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	82 60       	ori	r24, 0x02	; 2
    114e:	80 83       	st	Z, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    1150:	81 81       	ldd	r24, Z+1	; 0x01
    1152:	81 ff       	sbrs	r24, 1
    1154:	fd cf       	rjmp	.-6      	; 0x1150 <Password+0x10>
	CCP = CCP_IOREG_gc;
    1156:	88 ed       	ldi	r24, 0xD8	; 216
    1158:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	80 93 40 00 	sts	0x0040, r24
	gfx_mono_init();
    1160:	45 da       	rcall	.-2934   	; 0x5ec <gfx_mono_st7565r_init>
	PORTE.OUTSET = PIN4_bm;
    1162:	80 e1       	ldi	r24, 0x10	; 16
    1164:	e0 e8       	ldi	r30, 0x80	; 128
    1166:	f6 e0       	ldi	r31, 0x06	; 6
    1168:	85 83       	std	Z+5, r24	; 0x05
    116a:	2f ef       	ldi	r18, 0xFF	; 255
    116c:	87 ea       	ldi	r24, 0xA7	; 167
    116e:	91 e6       	ldi	r25, 0x61	; 97
    1170:	21 50       	subi	r18, 0x01	; 1
    1172:	80 40       	sbci	r24, 0x00	; 0
    1174:	90 40       	sbci	r25, 0x00	; 0
    1176:	e1 f7       	brne	.-8      	; 0x1170 <Password+0x30>
    1178:	00 c0       	rjmp	.+0      	; 0x117a <Password+0x3a>
    117a:	00 00       	nop
	_delay_ms(1000);
	gfx_mono_draw_string("Enter key:", 0, 0, &sysfont);
    117c:	20 e0       	ldi	r18, 0x00	; 0
    117e:	30 e2       	ldi	r19, 0x20	; 32
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	83 e3       	ldi	r24, 0x33	; 51
    1186:	90 e2       	ldi	r25, 0x20	; 32
    1188:	b3 db       	rcall	.-2202   	; 0x8f0 <gfx_mono_draw_string>
  //  _delay_ms(50);
	send_string("Enter key: \r\n");
    118a:	8e e3       	ldi	r24, 0x3E	; 62
    118c:	90 e2       	ldi	r25, 0x20	; 32
    118e:	b6 dd       	rcall	.-1172   	; 0xcfc <send_string>
	scan_keypad();
    1190:	c3 dd       	rcall	.-1146   	; 0xd18 <scan_keypad>
	while(rx <= 3)
    1192:	80 91 ae 23 	lds	r24, 0x23AE
    1196:	84 30       	cpi	r24, 0x04	; 4
    1198:	08 f0       	brcs	.+2      	; 0x119c <Password+0x5c>
    119a:	71 c1       	rjmp	.+738    	; 0x147e <Password+0x33e>
	{
		scan_keypad();
    119c:	bd dd       	rcall	.-1158   	; 0xd18 <scan_keypad>
	_delay_ms(1000);
	gfx_mono_draw_string("Enter key:", 0, 0, &sysfont);
  //  _delay_ms(50);
	send_string("Enter key: \r\n");
	scan_keypad();
	while(rx <= 3)
    119e:	80 91 ae 23 	lds	r24, 0x23AE
    11a2:	84 30       	cpi	r24, 0x04	; 4
    11a4:	d8 f3       	brcs	.-10     	; 0x119c <Password+0x5c>
	{
		scan_keypad();
	}

	for(rx=0;rx<=3;rx++)
    11a6:	10 92 ae 23 	sts	0x23AE, r1
    11aa:	6b c1       	rjmp	.+726    	; 0x1482 <Password+0x342>
	{
	send_char(pwd[rx]);
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	e0 55       	subi	r30, 0x50	; 80
    11b0:	fc 4d       	sbci	r31, 0xDC	; 220
    11b2:	80 81       	ld	r24, Z
    11b4:	64 dd       	rcall	.-1336   	; 0xc7e <send_char>
	while(rx <= 3)
	{
		scan_keypad();
	}

	for(rx=0;rx<=3;rx++)
    11b6:	e0 91 ae 23 	lds	r30, 0x23AE
    11ba:	ef 5f       	subi	r30, 0xFF	; 255
    11bc:	e0 93 ae 23 	sts	0x23AE, r30
    11c0:	e4 30       	cpi	r30, 0x04	; 4
    11c2:	a0 f3       	brcs	.-24     	; 0x11ac <Password+0x6c>
	{
	send_char(pwd[rx]);
	}
	send_char('\r');
    11c4:	8d e0       	ldi	r24, 0x0D	; 13
    11c6:	5b dd       	rcall	.-1354   	; 0xc7e <send_char>
	send_char('\n');
    11c8:	8a e0       	ldi	r24, 0x0A	; 10
    11ca:	59 dd       	rcall	.-1358   	; 0xc7e <send_char>
    11cc:	2f ef       	ldi	r18, 0xFF	; 255
    11ce:	87 ea       	ldi	r24, 0xA7	; 167
    11d0:	91 e6       	ldi	r25, 0x61	; 97
    11d2:	21 50       	subi	r18, 0x01	; 1
    11d4:	80 40       	sbci	r24, 0x00	; 0
    11d6:	90 40       	sbci	r25, 0x00	; 0
    11d8:	e1 f7       	brne	.-8      	; 0x11d2 <Password+0x92>
    11da:	00 c0       	rjmp	.+0      	; 0x11dc <Password+0x9c>
    11dc:	00 00       	nop
	_delay_ms(1000);
	if ((pwd[0]=='1') && (pwd[1]=='2') && (pwd[2]=='3') && (pwd[3]=='4'))
    11de:	80 91 b0 23 	lds	r24, 0x23B0
    11e2:	81 33       	cpi	r24, 0x31	; 49
    11e4:	09 f0       	breq	.+2      	; 0x11e8 <Password+0xa8>
    11e6:	17 c1       	rjmp	.+558    	; 0x1416 <Password+0x2d6>
    11e8:	80 91 b1 23 	lds	r24, 0x23B1
    11ec:	82 33       	cpi	r24, 0x32	; 50
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <Password+0xb2>
    11f0:	12 c1       	rjmp	.+548    	; 0x1416 <Password+0x2d6>
    11f2:	80 91 b2 23 	lds	r24, 0x23B2
    11f6:	83 33       	cpi	r24, 0x33	; 51
    11f8:	09 f0       	breq	.+2      	; 0x11fc <Password+0xbc>
    11fa:	0d c1       	rjmp	.+538    	; 0x1416 <Password+0x2d6>
    11fc:	80 91 b3 23 	lds	r24, 0x23B3
    1200:	84 33       	cpi	r24, 0x34	; 52
    1202:	09 f0       	breq	.+2      	; 0x1206 <Password+0xc6>
    1204:	08 c1       	rjmp	.+528    	; 0x1416 <Password+0x2d6>
	{
		gfx_mono_init();
    1206:	f2 d9       	rcall	.-3100   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
    1208:	c0 e8       	ldi	r28, 0x80	; 128
    120a:	d6 e0       	ldi	r29, 0x06	; 6
    120c:	10 e1       	ldi	r17, 0x10	; 16
    120e:	1d 83       	std	Y+5, r17	; 0x05
		gfx_mono_draw_string("Matched key", 0, 0, &sysfont);
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e2       	ldi	r19, 0x20	; 32
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	8c e4       	ldi	r24, 0x4C	; 76
    121a:	90 e2       	ldi	r25, 0x20	; 32
    121c:	69 db       	rcall	.-2350   	; 0x8f0 <gfx_mono_draw_string>
		
		send_string("Matched key\r\n");
    121e:	88 e5       	ldi	r24, 0x58	; 88
    1220:	90 e2       	ldi	r25, 0x20	; 32
    1222:	6c dd       	rcall	.-1320   	; 0xcfc <send_string>
		rx=0;
    1224:	10 92 ae 23 	sts	0x23AE, r1
		u0++;
    1228:	80 91 ad 23 	lds	r24, 0x23AD
    122c:	8f 5f       	subi	r24, 0xFF	; 255
    122e:	80 93 ad 23 	sts	0x23AD, r24
		int_to_char(u0);
    1232:	36 dd       	rcall	.-1428   	; 0xca0 <int_to_char>
		PORTE.OUTSET = PIN4_bm;
    1234:	1d 83       	std	Y+5, r17	; 0x05
		gfx_mono_draw_string("enter password", 5, 18, &sysfont);
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e2       	ldi	r19, 0x20	; 32
    123a:	42 e1       	ldi	r20, 0x12	; 18
    123c:	65 e0       	ldi	r22, 0x05	; 5
    123e:	86 e6       	ldi	r24, 0x66	; 102
    1240:	90 e2       	ldi	r25, 0x20	; 32
    1242:	56 db       	rcall	.-2388   	; 0x8f0 <gfx_mono_draw_string>
		send_string("enter password\r\n");
    1244:	85 e7       	ldi	r24, 0x75	; 117
    1246:	90 e2       	ldi	r25, 0x20	; 32
    1248:	59 dd       	rcall	.-1358   	; 0xcfc <send_string>
		while(rx <= 3)
    124a:	80 91 ae 23 	lds	r24, 0x23AE
    124e:	84 30       	cpi	r24, 0x04	; 4
    1250:	08 f0       	brcs	.+2      	; 0x1254 <Password+0x114>
    1252:	19 c1       	rjmp	.+562    	; 0x1486 <Password+0x346>
		{
			scan_keypad();
    1254:	61 dd       	rcall	.-1342   	; 0xd18 <scan_keypad>
		u0++;
		int_to_char(u0);
		PORTE.OUTSET = PIN4_bm;
		gfx_mono_draw_string("enter password", 5, 18, &sysfont);
		send_string("enter password\r\n");
		while(rx <= 3)
    1256:	80 91 ae 23 	lds	r24, 0x23AE
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	d8 f3       	brcs	.-10     	; 0x1254 <Password+0x114>
		{
			scan_keypad();
		}
		for(rx=0;rx<=3;rx++)
    125e:	10 92 ae 23 	sts	0x23AE, r1
    1262:	13 c1       	rjmp	.+550    	; 0x148a <Password+0x34a>
		{
			send_char(pwd[rx]);
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	e0 55       	subi	r30, 0x50	; 80
    1268:	fc 4d       	sbci	r31, 0xDC	; 220
    126a:	80 81       	ld	r24, Z
    126c:	08 dd       	rcall	.-1520   	; 0xc7e <send_char>
		send_string("enter password\r\n");
		while(rx <= 3)
		{
			scan_keypad();
		}
		for(rx=0;rx<=3;rx++)
    126e:	e0 91 ae 23 	lds	r30, 0x23AE
    1272:	ef 5f       	subi	r30, 0xFF	; 255
    1274:	e0 93 ae 23 	sts	0x23AE, r30
    1278:	e4 30       	cpi	r30, 0x04	; 4
    127a:	a0 f3       	brcs	.-24     	; 0x1264 <Password+0x124>
		{
			send_char(pwd[rx]);
		}
		send_char('\r');
    127c:	8d e0       	ldi	r24, 0x0D	; 13
    127e:	ff dc       	rcall	.-1538   	; 0xc7e <send_char>
		send_char('\n');
    1280:	8a e0       	ldi	r24, 0x0A	; 10
    1282:	fd dc       	rcall	.-1542   	; 0xc7e <send_char>
		if ((pwd[0]=='2') && (pwd[1]=='3') && (pwd[2]=='4') && (pwd[3]=='5'))
    1284:	80 91 b0 23 	lds	r24, 0x23B0
    1288:	82 33       	cpi	r24, 0x32	; 50
    128a:	09 f0       	breq	.+2      	; 0x128e <Password+0x14e>
    128c:	90 c0       	rjmp	.+288    	; 0x13ae <Password+0x26e>
    128e:	80 91 b1 23 	lds	r24, 0x23B1
    1292:	83 33       	cpi	r24, 0x33	; 51
    1294:	09 f0       	breq	.+2      	; 0x1298 <Password+0x158>
    1296:	8b c0       	rjmp	.+278    	; 0x13ae <Password+0x26e>
    1298:	80 91 b2 23 	lds	r24, 0x23B2
    129c:	84 33       	cpi	r24, 0x34	; 52
    129e:	09 f0       	breq	.+2      	; 0x12a2 <Password+0x162>
    12a0:	f6 c0       	rjmp	.+492    	; 0x148e <Password+0x34e>
    12a2:	80 91 b3 23 	lds	r24, 0x23B3
    12a6:	85 33       	cpi	r24, 0x35	; 53
    12a8:	09 f0       	breq	.+2      	; 0x12ac <Password+0x16c>
    12aa:	f1 c0       	rjmp	.+482    	; 0x148e <Password+0x34e>
		{
			
			gfx_mono_init();
    12ac:	9f d9       	rcall	.-3266   	; 0x5ec <gfx_mono_st7565r_init>
			PORTE.OUTSET = PIN4_bm;
    12ae:	80 e1       	ldi	r24, 0x10	; 16
    12b0:	e0 e8       	ldi	r30, 0x80	; 128
    12b2:	f6 e0       	ldi	r31, 0x06	; 6
    12b4:	85 83       	std	Z+5, r24	; 0x05
			gfx_mono_draw_string("1st person ", 5, 18, &sysfont);   
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e2       	ldi	r19, 0x20	; 32
    12ba:	42 e1       	ldi	r20, 0x12	; 18
    12bc:	65 e0       	ldi	r22, 0x05	; 5
    12be:	86 e8       	ldi	r24, 0x86	; 134
    12c0:	90 e2       	ldi	r25, 0x20	; 32
    12c2:	16 db       	rcall	.-2516   	; 0x8f0 <gfx_mono_draw_string>
    12c4:	2f ef       	ldi	r18, 0xFF	; 255
    12c6:	83 ec       	ldi	r24, 0xC3	; 195
    12c8:	99 e0       	ldi	r25, 0x09	; 9
    12ca:	21 50       	subi	r18, 0x01	; 1
    12cc:	80 40       	sbci	r24, 0x00	; 0
    12ce:	90 40       	sbci	r25, 0x00	; 0
    12d0:	e1 f7       	brne	.-8      	; 0x12ca <Password+0x18a>
    12d2:	00 c0       	rjmp	.+0      	; 0x12d4 <Password+0x194>
    12d4:	00 00       	nop
			_delay_ms(100);
			send_string("Matched first person password\r\n");
    12d6:	82 e9       	ldi	r24, 0x92	; 146
    12d8:	90 e2       	ldi	r25, 0x20	; 32
    12da:	10 dd       	rcall	.-1504   	; 0xcfc <send_string>
    12dc:	2f ef       	ldi	r18, 0xFF	; 255
    12de:	83 ec       	ldi	r24, 0xC3	; 195
    12e0:	99 e0       	ldi	r25, 0x09	; 9
    12e2:	21 50       	subi	r18, 0x01	; 1
    12e4:	80 40       	sbci	r24, 0x00	; 0
    12e6:	90 40       	sbci	r25, 0x00	; 0
    12e8:	e1 f7       	brne	.-8      	; 0x12e2 <Password+0x1a2>
    12ea:	00 c0       	rjmp	.+0      	; 0x12ec <Password+0x1ac>
    12ec:	00 00       	nop
			_delay_ms(100);
			rx=0;
    12ee:	10 92 ae 23 	sts	0x23AE, r1
			u0++;
    12f2:	80 91 ad 23 	lds	r24, 0x23AD
    12f6:	8f 5f       	subi	r24, 0xFF	; 255
    12f8:	80 93 ad 23 	sts	0x23AD, r24
			int_to_char(u0);
    12fc:	d1 dc       	rcall	.-1630   	; 0xca0 <int_to_char>
    12fe:	2f ef       	ldi	r18, 0xFF	; 255
    1300:	81 ee       	ldi	r24, 0xE1	; 225
    1302:	94 e0       	ldi	r25, 0x04	; 4
    1304:	21 50       	subi	r18, 0x01	; 1
    1306:	80 40       	sbci	r24, 0x00	; 0
    1308:	90 40       	sbci	r25, 0x00	; 0
    130a:	e1 f7       	brne	.-8      	; 0x1304 <Password+0x1c4>
    130c:	00 c0       	rjmp	.+0      	; 0x130e <Password+0x1ce>
    130e:	00 00       	nop
			_delay_ms(50);
			Password();
    1310:	17 df       	rcall	.-466    	; 0x1140 <Password>
    1312:	c8 c0       	rjmp	.+400    	; 0x14a4 <Password+0x364>

		}
		else if ((pwd[0]=='2') && (pwd[1]=='3') && (pwd[2]=='4') && (pwd[3]=='7'))
    1314:	80 91 b3 23 	lds	r24, 0x23B3
    1318:	87 33       	cpi	r24, 0x37	; 55
    131a:	09 f0       	breq	.+2      	; 0x131e <Password+0x1de>
    131c:	bd c0       	rjmp	.+378    	; 0x1498 <Password+0x358>
		{
			gfx_mono_init();
    131e:	66 d9       	rcall	.-3380   	; 0x5ec <gfx_mono_st7565r_init>
			PORTE.OUTSET = PIN4_bm;
    1320:	80 e1       	ldi	r24, 0x10	; 16
    1322:	e0 e8       	ldi	r30, 0x80	; 128
    1324:	f6 e0       	ldi	r31, 0x06	; 6
    1326:	85 83       	std	Z+5, r24	; 0x05
			gfx_mono_draw_string("2nd Matched", 5, 18, &sysfont);
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e2       	ldi	r19, 0x20	; 32
    132c:	42 e1       	ldi	r20, 0x12	; 18
    132e:	65 e0       	ldi	r22, 0x05	; 5
    1330:	82 eb       	ldi	r24, 0xB2	; 178
    1332:	90 e2       	ldi	r25, 0x20	; 32
    1334:	dd da       	rcall	.-2630   	; 0x8f0 <gfx_mono_draw_string>
    1336:	2f ef       	ldi	r18, 0xFF	; 255
    1338:	83 ec       	ldi	r24, 0xC3	; 195
    133a:	99 e0       	ldi	r25, 0x09	; 9
    133c:	21 50       	subi	r18, 0x01	; 1
    133e:	80 40       	sbci	r24, 0x00	; 0
    1340:	90 40       	sbci	r25, 0x00	; 0
    1342:	e1 f7       	brne	.-8      	; 0x133c <Password+0x1fc>
    1344:	00 c0       	rjmp	.+0      	; 0x1346 <Password+0x206>
    1346:	00 00       	nop
			_delay_ms(100);
			send_string("Password second Matched\r\n");
    1348:	8e eb       	ldi	r24, 0xBE	; 190
    134a:	90 e2       	ldi	r25, 0x20	; 32
    134c:	d7 dc       	rcall	.-1618   	; 0xcfc <send_string>
			rx=0;
    134e:	10 92 ae 23 	sts	0x23AE, r1
			u2++;
    1352:	80 91 ab 23 	lds	r24, 0x23AB
    1356:	8f 5f       	subi	r24, 0xFF	; 255
    1358:	80 93 ab 23 	sts	0x23AB, r24
			int_to_char(u2);
    135c:	a1 dc       	rcall	.-1726   	; 0xca0 <int_to_char>
			Password();
    135e:	f0 de       	rcall	.-544    	; 0x1140 <Password>
    1360:	a1 c0       	rjmp	.+322    	; 0x14a4 <Password+0x364>
		}
		
		else if ((pwd[0]=='2') && (pwd[1]=='3') && (pwd[2]=='4') && (pwd[3]=='8'))
    1362:	80 91 b3 23 	lds	r24, 0x23B3
    1366:	88 33       	cpi	r24, 0x38	; 56
    1368:	11 f5       	brne	.+68     	; 0x13ae <Password+0x26e>
		{
			gfx_mono_init();
    136a:	40 d9       	rcall	.-3456   	; 0x5ec <gfx_mono_st7565r_init>
			PORTE.OUTSET = PIN4_bm;
    136c:	80 e1       	ldi	r24, 0x10	; 16
    136e:	e0 e8       	ldi	r30, 0x80	; 128
    1370:	f6 e0       	ldi	r31, 0x06	; 6
    1372:	85 83       	std	Z+5, r24	; 0x05
			gfx_mono_draw_string("3rd matched", 5, 18, &sysfont);
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e2       	ldi	r19, 0x20	; 32
    1378:	42 e1       	ldi	r20, 0x12	; 18
    137a:	65 e0       	ldi	r22, 0x05	; 5
    137c:	88 ed       	ldi	r24, 0xD8	; 216
    137e:	90 e2       	ldi	r25, 0x20	; 32
    1380:	b7 da       	rcall	.-2706   	; 0x8f0 <gfx_mono_draw_string>
    1382:	2f ef       	ldi	r18, 0xFF	; 255
    1384:	83 ec       	ldi	r24, 0xC3	; 195
    1386:	99 e0       	ldi	r25, 0x09	; 9
    1388:	21 50       	subi	r18, 0x01	; 1
    138a:	80 40       	sbci	r24, 0x00	; 0
    138c:	90 40       	sbci	r25, 0x00	; 0
    138e:	e1 f7       	brne	.-8      	; 0x1388 <Password+0x248>
    1390:	00 c0       	rjmp	.+0      	; 0x1392 <Password+0x252>
    1392:	00 00       	nop
			_delay_ms(100);
			send_string("Password Matched for Person_3\r\n");
    1394:	84 ee       	ldi	r24, 0xE4	; 228
    1396:	90 e2       	ldi	r25, 0x20	; 32
    1398:	b1 dc       	rcall	.-1694   	; 0xcfc <send_string>
			rx=0;
    139a:	10 92 ae 23 	sts	0x23AE, r1
			u3++;
    139e:	80 91 aa 23 	lds	r24, 0x23AA
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	80 93 aa 23 	sts	0x23AA, r24
			int_to_char(u3);
    13a8:	7b dc       	rcall	.-1802   	; 0xca0 <int_to_char>
			Password();
    13aa:	ca de       	rcall	.-620    	; 0x1140 <Password>
    13ac:	7b c0       	rjmp	.+246    	; 0x14a4 <Password+0x364>
		}
		else
		{
			gfx_mono_init();
    13ae:	1e d9       	rcall	.-3524   	; 0x5ec <gfx_mono_st7565r_init>
			PORTE.OUTSET = PIN4_bm;
    13b0:	80 e1       	ldi	r24, 0x10	; 16
    13b2:	e0 e8       	ldi	r30, 0x80	; 128
    13b4:	f6 e0       	ldi	r31, 0x06	; 6
    13b6:	85 83       	std	Z+5, r24	; 0x05
			gfx_mono_draw_string("Password Didn't Matched\r\n", 0, 0, &sysfont);
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e2       	ldi	r19, 0x20	; 32
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	84 e0       	ldi	r24, 0x04	; 4
    13c2:	91 e2       	ldi	r25, 0x21	; 33
    13c4:	95 da       	rcall	.-2774   	; 0x8f0 <gfx_mono_draw_string>
    13c6:	2f ef       	ldi	r18, 0xFF	; 255
    13c8:	83 ec       	ldi	r24, 0xC3	; 195
    13ca:	99 e0       	ldi	r25, 0x09	; 9
    13cc:	21 50       	subi	r18, 0x01	; 1
    13ce:	80 40       	sbci	r24, 0x00	; 0
    13d0:	90 40       	sbci	r25, 0x00	; 0
    13d2:	e1 f7       	brne	.-8      	; 0x13cc <Password+0x28c>
    13d4:	00 c0       	rjmp	.+0      	; 0x13d6 <Password+0x296>
    13d6:	00 00       	nop
			_delay_ms(100);
			send_string("Password Didn't Matched\r\n");
    13d8:	84 e0       	ldi	r24, 0x04	; 4
    13da:	91 e2       	ldi	r25, 0x21	; 33
    13dc:	8f dc       	rcall	.-1762   	; 0xcfc <send_string>
		    gfx_mono_init();
    13de:	06 d9       	rcall	.-3572   	; 0x5ec <gfx_mono_st7565r_init>
		    PORTE.OUTSET = PIN4_bm;
    13e0:	80 e1       	ldi	r24, 0x10	; 16
    13e2:	e0 e8       	ldi	r30, 0x80	; 128
    13e4:	f6 e0       	ldi	r31, 0x06	; 6
    13e6:	85 83       	std	Z+5, r24	; 0x05
			gfx_mono_draw_string("Try Again1!\n\r", 5, 18, &sysfont);
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	30 e2       	ldi	r19, 0x20	; 32
    13ec:	42 e1       	ldi	r20, 0x12	; 18
    13ee:	65 e0       	ldi	r22, 0x05	; 5
    13f0:	8e e1       	ldi	r24, 0x1E	; 30
    13f2:	91 e2       	ldi	r25, 0x21	; 33
    13f4:	7d da       	rcall	.-2822   	; 0x8f0 <gfx_mono_draw_string>
    13f6:	2f ef       	ldi	r18, 0xFF	; 255
    13f8:	83 ec       	ldi	r24, 0xC3	; 195
    13fa:	99 e0       	ldi	r25, 0x09	; 9
    13fc:	21 50       	subi	r18, 0x01	; 1
    13fe:	80 40       	sbci	r24, 0x00	; 0
    1400:	90 40       	sbci	r25, 0x00	; 0
    1402:	e1 f7       	brne	.-8      	; 0x13fc <Password+0x2bc>
    1404:	00 c0       	rjmp	.+0      	; 0x1406 <Password+0x2c6>
    1406:	00 00       	nop
			_delay_ms(100);
			send_string("Try Again!\n\r");
    1408:	8c e2       	ldi	r24, 0x2C	; 44
    140a:	91 e2       	ldi	r25, 0x21	; 33
    140c:	77 dc       	rcall	.-1810   	; 0xcfc <send_string>
			rx=0;
    140e:	10 92 ae 23 	sts	0x23AE, r1
			Password();
    1412:	96 de       	rcall	.-724    	; 0x1140 <Password>
    1414:	47 c0       	rjmp	.+142    	; 0x14a4 <Password+0x364>
		}
	}
	else
	{   gfx_mono_init();
    1416:	ea d8       	rcall	.-3628   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
    1418:	80 e1       	ldi	r24, 0x10	; 16
    141a:	e0 e8       	ldi	r30, 0x80	; 128
    141c:	f6 e0       	ldi	r31, 0x06	; 6
    141e:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("key did'nt matched\r\n", 0, 0, &sysfont);
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e2       	ldi	r19, 0x20	; 32
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	89 e3       	ldi	r24, 0x39	; 57
    142a:	91 e2       	ldi	r25, 0x21	; 33
    142c:	61 da       	rcall	.-2878   	; 0x8f0 <gfx_mono_draw_string>
    142e:	2f ef       	ldi	r18, 0xFF	; 255
    1430:	8f e4       	ldi	r24, 0x4F	; 79
    1432:	93 ec       	ldi	r25, 0xC3	; 195
    1434:	21 50       	subi	r18, 0x01	; 1
    1436:	80 40       	sbci	r24, 0x00	; 0
    1438:	90 40       	sbci	r25, 0x00	; 0
    143a:	e1 f7       	brne	.-8      	; 0x1434 <Password+0x2f4>
    143c:	00 c0       	rjmp	.+0      	; 0x143e <Password+0x2fe>
    143e:	00 00       	nop
		_delay_ms(2000);
		gfx_mono_init();
    1440:	d5 d8       	rcall	.-3670   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
    1442:	80 e1       	ldi	r24, 0x10	; 16
    1444:	e0 e8       	ldi	r30, 0x80	; 128
    1446:	f6 e0       	ldi	r31, 0x06	; 6
    1448:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("Try again!\n\r", 5, 18, &sysfont);
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	30 e2       	ldi	r19, 0x20	; 32
    144e:	42 e1       	ldi	r20, 0x12	; 18
    1450:	65 e0       	ldi	r22, 0x05	; 5
    1452:	8e e4       	ldi	r24, 0x4E	; 78
    1454:	91 e2       	ldi	r25, 0x21	; 33
    1456:	4c da       	rcall	.-2920   	; 0x8f0 <gfx_mono_draw_string>
    1458:	2f ef       	ldi	r18, 0xFF	; 255
    145a:	87 ea       	ldi	r24, 0xA7	; 167
    145c:	91 e6       	ldi	r25, 0x61	; 97
    145e:	21 50       	subi	r18, 0x01	; 1
    1460:	80 40       	sbci	r24, 0x00	; 0
    1462:	90 40       	sbci	r25, 0x00	; 0
    1464:	e1 f7       	brne	.-8      	; 0x145e <Password+0x31e>
    1466:	00 c0       	rjmp	.+0      	; 0x1468 <Password+0x328>
    1468:	00 00       	nop
		_delay_ms(1000);
		send_string("key did'nt matched\r\n");
    146a:	89 e3       	ldi	r24, 0x39	; 57
    146c:	91 e2       	ldi	r25, 0x21	; 33
    146e:	46 dc       	rcall	.-1908   	; 0xcfc <send_string>
		send_string("Try again!\n\r");
    1470:	8e e4       	ldi	r24, 0x4E	; 78
    1472:	91 e2       	ldi	r25, 0x21	; 33
    1474:	43 dc       	rcall	.-1914   	; 0xcfc <send_string>
		rx=0;
    1476:	10 92 ae 23 	sts	0x23AE, r1
		Password();
    147a:	62 de       	rcall	.-828    	; 0x1140 <Password>
    147c:	13 c0       	rjmp	.+38     	; 0x14a4 <Password+0x364>
	while(rx <= 3)
	{
		scan_keypad();
	}

	for(rx=0;rx<=3;rx++)
    147e:	10 92 ae 23 	sts	0x23AE, r1
}

//G:\RAHUL IMP_DATA\M.Tech_Project\My xmega usart running code\KAYPAD\KEYPAD\KEYPAD\KEYPAD.c 2

void Password(void)
{
    1482:	e0 e0       	ldi	r30, 0x00	; 0
    1484:	93 ce       	rjmp	.-730    	; 0x11ac <Password+0x6c>
		send_string("enter password\r\n");
		while(rx <= 3)
		{
			scan_keypad();
		}
		for(rx=0;rx<=3;rx++)
    1486:	10 92 ae 23 	sts	0x23AE, r1
}

//G:\RAHUL IMP_DATA\M.Tech_Project\My xmega usart running code\KAYPAD\KEYPAD\KEYPAD\KEYPAD.c 2

void Password(void)
{
    148a:	e0 e0       	ldi	r30, 0x00	; 0
    148c:	eb ce       	rjmp	.-554    	; 0x1264 <Password+0x124>
			int_to_char(u0);
			_delay_ms(50);
			Password();

		}
		else if ((pwd[0]=='2') && (pwd[1]=='3') && (pwd[2]=='4') && (pwd[3]=='7'))
    148e:	80 91 b2 23 	lds	r24, 0x23B2
    1492:	84 33       	cpi	r24, 0x34	; 52
    1494:	09 f4       	brne	.+2      	; 0x1498 <Password+0x358>
    1496:	3e cf       	rjmp	.-388    	; 0x1314 <Password+0x1d4>
			u2++;
			int_to_char(u2);
			Password();
		}
		
		else if ((pwd[0]=='2') && (pwd[1]=='3') && (pwd[2]=='4') && (pwd[3]=='8'))
    1498:	80 91 b2 23 	lds	r24, 0x23B2
    149c:	84 33       	cpi	r24, 0x34	; 52
    149e:	09 f0       	breq	.+2      	; 0x14a2 <Password+0x362>
    14a0:	86 cf       	rjmp	.-244    	; 0x13ae <Password+0x26e>
    14a2:	5f cf       	rjmp	.-322    	; 0x1362 <Password+0x222>
		send_string("key did'nt matched\r\n");
		send_string("Try again!\n\r");
		rx=0;
		Password();
	}
}
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	08 95       	ret

000014ac <main>:



int main(void)
{
    14ac:	cf 93       	push	r28
	gfx_mono_init();
    14ae:	9e d8       	rcall	.-3780   	; 0x5ec <gfx_mono_st7565r_init>
	PORTE_OUTSET=(1<<4);
    14b0:	c0 e1       	ldi	r28, 0x10	; 16
    14b2:	c0 93 85 06 	sts	0x0685, r28
	PORTE_DIRSET=0x0F; // PORTE as output port
    14b6:	8f e0       	ldi	r24, 0x0F	; 15
    14b8:	80 93 81 06 	sts	0x0681, r24
	PORTD_DIR =0x00; // PORTD as input port
    14bc:	10 92 60 06 	sts	0x0660, r1
    PORTB_DIR = 0x0F;//port b as input
    14c0:	80 93 20 06 	sts	0x0620, r24
    PORTC_OUT = 0x01;
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	80 93 44 06 	sts	0x0644, r24
	
	Set_Clk_32MHz();
    14ca:	b7 db       	rcall	.-2194   	; 0xc3a <Set_Clk_32MHz>
	uart_init();
    14cc:	c6 db       	rcall	.-2164   	; 0xc5a <uart_init>
	gfx_mono_init();
    14ce:	8e d8       	rcall	.-3812   	; 0x5ec <gfx_mono_st7565r_init>
	PORTE.OUTSET = PIN4_bm;
    14d0:	e0 e8       	ldi	r30, 0x80	; 128
    14d2:	f6 e0       	ldi	r31, 0x06	; 6
    14d4:	c5 83       	std	Z+5, r28	; 0x05
	gfx_mono_draw_string("testing keypad\r\n", 0, 0, &sysfont);
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e2       	ldi	r19, 0x20	; 32
    14da:	40 e0       	ldi	r20, 0x00	; 0
    14dc:	60 e0       	ldi	r22, 0x00	; 0
    14de:	8b e5       	ldi	r24, 0x5B	; 91
    14e0:	91 e2       	ldi	r25, 0x21	; 33
    14e2:	06 da       	rcall	.-3060   	; 0x8f0 <gfx_mono_draw_string>
    14e4:	2f ef       	ldi	r18, 0xFF	; 255
    14e6:	81 ee       	ldi	r24, 0xE1	; 225
    14e8:	94 e0       	ldi	r25, 0x04	; 4
    14ea:	21 50       	subi	r18, 0x01	; 1
    14ec:	80 40       	sbci	r24, 0x00	; 0
    14ee:	90 40       	sbci	r25, 0x00	; 0
    14f0:	e1 f7       	brne	.-8      	; 0x14ea <main+0x3e>
    14f2:	00 c0       	rjmp	.+0      	; 0x14f4 <main+0x48>
    14f4:	00 00       	nop
	_delay_ms(50);
	send_string("testing keypad\r\n");
    14f6:	8b e5       	ldi	r24, 0x5B	; 91
    14f8:	91 e2       	ldi	r25, 0x21	; 33
    14fa:	00 dc       	rcall	.-2048   	; 0xcfc <send_string>
	if(PORTE_IN = 0x38)
    14fc:	88 e3       	ldi	r24, 0x38	; 56
    14fe:	80 93 88 06 	sts	0x0688, r24
	{
		gfx_mono_init();
    1502:	74 d8       	rcall	.-3864   	; 0x5ec <gfx_mono_st7565r_init>
		PORTE.OUTSET = PIN4_bm;
    1504:	80 e1       	ldi	r24, 0x10	; 16
    1506:	e0 e8       	ldi	r30, 0x80	; 128
    1508:	f6 e0       	ldi	r31, 0x06	; 6
    150a:	85 83       	std	Z+5, r24	; 0x05
		gfx_mono_draw_string("The user_1 entered=", 0, 0, &sysfont);
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e2       	ldi	r19, 0x20	; 32
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	8c e6       	ldi	r24, 0x6C	; 108
    1516:	91 e2       	ldi	r25, 0x21	; 33
    1518:	eb d9       	rcall	.-3114   	; 0x8f0 <gfx_mono_draw_string>
		send_string("The user_1 entered=");
    151a:	8c e6       	ldi	r24, 0x6C	; 108
    151c:	91 e2       	ldi	r25, 0x21	; 33
    151e:	ee db       	rcall	.-2084   	; 0xcfc <send_string>
		int_to_char(u1);
    1520:	80 91 ac 23 	lds	r24, 0x23AC
    1524:	bd db       	rcall	.-2182   	; 0xca0 <int_to_char>
		gfx_mono_draw_string("\r\n", 0, 0, &sysfont);
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	30 e2       	ldi	r19, 0x20	; 32
    152a:	40 e0       	ldi	r20, 0x00	; 0
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	89 e4       	ldi	r24, 0x49	; 73
    1530:	90 e2       	ldi	r25, 0x20	; 32
    1532:	de d9       	rcall	.-3140   	; 0x8f0 <gfx_mono_draw_string>
		send_string("\r\n");
    1534:	89 e4       	ldi	r24, 0x49	; 73
    1536:	90 e2       	ldi	r25, 0x20	; 32
    1538:	e1 db       	rcall	.-2110   	; 0xcfc <send_string>
		gfx_mono_draw_string("The user_2 entered=", 0, 0, &sysfont);
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e2       	ldi	r19, 0x20	; 32
    153e:	40 e0       	ldi	r20, 0x00	; 0
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	80 e8       	ldi	r24, 0x80	; 128
    1544:	91 e2       	ldi	r25, 0x21	; 33
    1546:	d4 d9       	rcall	.-3160   	; 0x8f0 <gfx_mono_draw_string>
		send_string("The user_2 entered=");
    1548:	80 e8       	ldi	r24, 0x80	; 128
    154a:	91 e2       	ldi	r25, 0x21	; 33
    154c:	d7 db       	rcall	.-2130   	; 0xcfc <send_string>
		
		int_to_char(u2);
    154e:	80 91 ab 23 	lds	r24, 0x23AB
    1552:	a6 db       	rcall	.-2228   	; 0xca0 <int_to_char>
		gfx_mono_draw_string("\r\n", 0, 0, &sysfont);
    1554:	20 e0       	ldi	r18, 0x00	; 0
    1556:	30 e2       	ldi	r19, 0x20	; 32
    1558:	40 e0       	ldi	r20, 0x00	; 0
    155a:	60 e0       	ldi	r22, 0x00	; 0
    155c:	89 e4       	ldi	r24, 0x49	; 73
    155e:	90 e2       	ldi	r25, 0x20	; 32
    1560:	c7 d9       	rcall	.-3186   	; 0x8f0 <gfx_mono_draw_string>
		send_string("\r\n");
    1562:	89 e4       	ldi	r24, 0x49	; 73
    1564:	90 e2       	ldi	r25, 0x20	; 32
    1566:	ca db       	rcall	.-2156   	; 0xcfc <send_string>
		gfx_mono_draw_string("The user_3 entered=", 0, 0, &sysfont);
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e2       	ldi	r19, 0x20	; 32
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	84 e9       	ldi	r24, 0x94	; 148
    1572:	91 e2       	ldi	r25, 0x21	; 33
    1574:	bd d9       	rcall	.-3206   	; 0x8f0 <gfx_mono_draw_string>
		send_string("The user_3 entered=");
    1576:	84 e9       	ldi	r24, 0x94	; 148
    1578:	91 e2       	ldi	r25, 0x21	; 33
    157a:	c0 db       	rcall	.-2176   	; 0xcfc <send_string>
		int_to_char(u3);
    157c:	80 91 aa 23 	lds	r24, 0x23AA
    1580:	8f db       	rcall	.-2274   	; 0xca0 <int_to_char>
		gfx_mono_draw_string("\r\n", 0, 0, &sysfont);
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e2       	ldi	r19, 0x20	; 32
    1586:	40 e0       	ldi	r20, 0x00	; 0
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	89 e4       	ldi	r24, 0x49	; 73
    158c:	90 e2       	ldi	r25, 0x20	; 32
    158e:	b0 d9       	rcall	.-3232   	; 0x8f0 <gfx_mono_draw_string>
	    send_string("\r\n");
    1590:	89 e4       	ldi	r24, 0x49	; 73
    1592:	90 e2       	ldi	r25, 0x20	; 32
    1594:	b3 db       	rcall	.-2202   	; 0xcfc <send_string>
		Password();
    1596:	d4 dd       	rcall	.-1112   	; 0x1140 <Password>
	}
	else
	Password();
	
	
}
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	cf 91       	pop	r28
    159e:	08 95       	ret

000015a0 <_exit>:
    15a0:	f8 94       	cli

000015a2 <__stop_program>:
    15a2:	ff cf       	rjmp	.-2      	; 0x15a2 <__stop_program>
